/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package salesinventorysystem;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import static salesinventorysystem.companyInfo.txtAddress;
import static salesinventorysystem.companyInfo.txtContact;
import static salesinventorysystem.companyInfo.txtDev;
import static salesinventorysystem.companyInfo.txtEmail;
import static salesinventorysystem.companyInfo.txtName;

/**
 *
 * @author UMAGAGEE
 */
public class home extends javax.swing.JFrame {

    Date d;
    SimpleDateFormat dd;
    Connection con = null;
    PreparedStatement ps= null;
    ResultSet rs = null;
     Statement stm=null;
    String imagePath=null;
    static int ex;
    static String almost_expired_bar ; 
    static String expired_bar ;
     DecimalFormat df = new  DecimalFormat(" .###");

    /**
     * Creates new form home
     */
    public home() {
        initComponents();
        con=ConnectionToDatabase.conn();
        setLocationRelativeTo(null);
        showDate();
        
        showallTemptable();
         showReceiveNumber();
         showCompanyInfo();
          showallBadOrder();
          itemForBadOrder();
          returnedToStockTable();
          loginas();
          
          UpdateExpiry();
         
          nearExpiry();
        showNearExpiry();
       
        Expiry();
        showExpiry();
        
        checkQty();
          
          users();
            supplier();
            clearSale();
            showProductinSelling();
        //   ItenName();
            txtSalesNum.hide();
           
            
            totalUsers();
            totalSupplier();
            totalItems();

          jMenuItem12.hide();
        //jPanelHome.hide();
        jPanelAddItem.hide();
        jPanelPrintimg.hide();
        jPanelSell.hide();
//        txtPrint.hide();
 
//        jPanelReport.hide();
//        jLabel43.hide();
      //  btnPrint.hide();
      
      jLabel57.hide();
      txtBuyingPrice.hide();  
      
      jLabel58.hide();
      txtProfit.hide();
      
       // jLabel85.hide();
        //netSales.hide();
       // jButton12.hide();
       jLabel112.hide();
       jbPprofit.hide();
   Date date = new Date();
         jDateChooserReceiveDate.setDate(date);
         jDateChooserExperyDate.setDate(date);
          jDateChooserPayment.setDate(date);
       
//       
//       
        
    }
    String location=null;
    String fileName;
    
    void itemForBadOrder(){
        
             String sql = "select * from item";
       try{
           ps=con.prepareStatement(sql);
           rs=ps.executeQuery();
           while(rs.next()){
               String receivedNum = rs.getString("receiving_number");
           //    CmbForm.setSelectedItem(receivedNum);
            
           
           }
           }catch(SQLException e){
           JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
    }
    
    
      int pos=0;
    
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabelHome = new javax.swing.JLabel();
        jLabelItem = new javax.swing.JLabel();
        jLabelSales = new javax.swing.JLabel();
        jLabel1Report = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        today = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        username1 = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jPanelHome = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jComboBox12 = new javax.swing.JComboBox<>();
        textSearch19 = new javax.swing.JTextField();
        jPanel34 = new javax.swing.JPanel();
        jLabel80 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        LblTotalUser = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        LblTotalProducts = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        LblTotalSuppliers = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanelAddItem = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        textSearch = new javax.swing.JTextField();
        jLabel111 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton14 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        textReceiving = new javax.swing.JLabel();
        txtamtTobePaid = new javax.swing.JTextField();
        textItemName = new javax.swing.JTextField();
        textDescription = new javax.swing.JTextField();
        jDateChooserExperyDate = new com.toedter.calendar.JDateChooser();
        jDateChooserReceiveDate = new com.toedter.calendar.JDateChooser();
        textItemNumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        textQuantity = new javax.swing.JTextField();
        textBuyingPrice = new javax.swing.JTextField();
        txtBuyingPerUnit = new javax.swing.JTextField();
        jLabel79 = new javax.swing.JLabel();
        txtPerBox = new javax.swing.JTextField();
        txtBoxes = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        txtAmtPaid = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        txtAmtLeft = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        textTotalSellingPrice = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        btnPrint = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        txtSellingPerUnit = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        textAdditionalQuantity = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        txtPercentage = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        jComboBoxPaidBy = new javax.swing.JComboBox<>();
        jDateChooserPayment = new com.toedter.calendar.JDateChooser();
        jLabel55 = new javax.swing.JLabel();
        txtTotalQty = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jPanelSell = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        textSearch3 = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        txtSalesNum = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jLabel108 = new javax.swing.JLabel();
        txtBuyingQty = new javax.swing.JTextField();
        jLabel103 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        txtSellingPRice = new javax.swing.JTextField();
        txtAvailable = new javax.swing.JTextField();
        textStudentID3 = new javax.swing.JTextField();
        txtAmount = new javax.swing.JTextField();
        textStudentID = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        txtPreviousQty = new javax.swing.JTextField();
        txtReceiveNum = new javax.swing.JTextField();
        textStudentID5 = new javax.swing.JTextField();
        jLabel101 = new javax.swing.JLabel();
        txtBuyingPrice = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        txtProfit = new javax.swing.JTextField();
        jLabel112 = new javax.swing.JLabel();
        jbPprofit = new javax.swing.JLabel();
        jPanel32 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        txtItemNum = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        txtItemName = new javax.swing.JTextField();
        jLabel109 = new javax.swing.JLabel();
        txtDiscountPercentage = new javax.swing.JTextField();
        jLabel110 = new javax.swing.JLabel();
        jLabel113 = new javax.swing.JLabel();
        txtDiscountAmt = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jblAmountDue1 = new javax.swing.JLabel();
        jblAmountDue = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        btnProceed = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        lblAMountPaid = new javax.swing.JLabel();
        jLabel114 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jPanelReport = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox<>();
        textSearch7 = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel82 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        jButton17 = new javax.swing.JButton();
        jPanel37 = new javax.swing.JPanel();
        totalSales = new javax.swing.JTextField();
        txtTransaction = new javax.swing.JTextField();
        netSales = new javax.swing.JTextField();
        jLabel85 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jButton51 = new javax.swing.JButton();
        jLabel83 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jPanel39 = new javax.swing.JPanel();
        toDate = new com.toedter.calendar.JDateChooser();
        jLabel56 = new javax.swing.JLabel();
        fromDate = new com.toedter.calendar.JDateChooser();
        jLabel81 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jButton55 = new javax.swing.JButton();
        jComboBoxUsers = new javax.swing.JComboBox<>();
        jLabel89 = new javax.swing.JLabel();
        jButton56 = new javax.swing.JButton();
        jPanelPrintimg = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(0, 51, 51));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setForeground(new java.awt.Color(51, 51, 51));

        jLabelHome.setBackground(new java.awt.Color(0, 51, 51));
        jLabelHome.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabelHome.setForeground(new java.awt.Color(255, 255, 255));
        jLabelHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_Home_48px.png"))); // NOI18N
        jLabelHome.setText("      Home");
        jLabelHome.setOpaque(true);
        jLabelHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelHomeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelHomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelHomeMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelHomeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabelHomeMouseReleased(evt);
            }
        });

        jLabelItem.setBackground(new java.awt.Color(0, 51, 51));
        jLabelItem.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabelItem.setForeground(new java.awt.Color(255, 255, 255));
        jLabelItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_Sell_Stock_48px.png"))); // NOI18N
        jLabelItem.setText("  Add Item");
        jLabelItem.setOpaque(true);
        jLabelItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelItemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelItemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelItemMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelItemMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabelItemMouseReleased(evt);
            }
        });

        jLabelSales.setBackground(new java.awt.Color(0, 51, 51));
        jLabelSales.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabelSales.setForeground(new java.awt.Color(255, 255, 255));
        jLabelSales.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_Sell_48px.png"))); // NOI18N
        jLabelSales.setText("    Sell");
        jLabelSales.setOpaque(true);
        jLabelSales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelSalesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelSalesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelSalesMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelSalesMousePressed(evt);
            }
        });

        jLabel1Report.setBackground(new java.awt.Color(0, 51, 51));
        jLabel1Report.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1Report.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1Report.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_Report_Card_48px_1.png"))); // NOI18N
        jLabel1Report.setText("   Report");
        jLabel1Report.setOpaque(true);
        jLabel1Report.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1ReportMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1ReportMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel1ReportMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1ReportMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelSales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1Report, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)))
                    .addComponent(jLabelItem, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                    .addComponent(jLabelHome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addComponent(jLabelHome, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106)
                .addComponent(jLabelItem, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addComponent(jLabelSales, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addComponent(jLabel1Report, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 150, 640));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        today.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        today.setForeground(new java.awt.Color(0, 0, 102));
        today.setText("00-00-0000");
        jPanel2.add(today, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Time");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, -1));

        time.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        time.setForeground(new java.awt.Color(153, 0, 0));
        time.setText("00:00:00");
        jPanel2.add(time, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, -1, -1));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel8.setText("User Name : ");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 40, -1, -1));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setText("Logout");
        jLabel6.setOpaque(true);
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel6MouseExited(evt);
            }
        });
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 10, 70, 20));

        username1.setBackground(new java.awt.Color(255, 255, 255));
        username1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        username1.setForeground(new java.awt.Color(0, 0, 102));
        username1.setText("Login As ");
        jPanel2.add(username1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, 120, -1));

        username.setBackground(new java.awt.Color(255, 255, 255));
        username.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        username.setForeground(new java.awt.Color(153, 0, 0));
        username.setText("Login As ");
        jPanel2.add(username, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 60, 160, -1));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setText("Login As : ");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 40, -1, -1));

        jLabel18.setFont(new java.awt.Font("Andalus", 1, 30)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(153, 0, 0));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("STORE MANAGEMENT SYSTEM");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, -1, 40));

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel19.setText("Date ");
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 850, 90));

        jPanelHome.setBackground(new java.awt.Color(255, 255, 255));
        jPanelHome.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanelHomeMouseEntered(evt);
            }
        });
        jPanelHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel33.setBackground(new java.awt.Color(0, 51, 51));
        jPanel33.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel77.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel77.setForeground(new java.awt.Color(255, 255, 255));
        jLabel77.setText("Item Details");
        jPanel33.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 66, -1, 40));

        jLabel78.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel78.setForeground(new java.awt.Color(255, 255, 255));
        jLabel78.setText("Search By:");
        jPanel33.add(jLabel78, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 66, -1, 40));

        jComboBox12.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox12.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tittle" }));
        jPanel33.add(jComboBox12, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 66, 182, 40));

        textSearch19.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        textSearch19.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textSearch19KeyTyped(evt);
            }
        });
        jPanel33.add(textSearch19, new org.netbeans.lib.awtextra.AbsoluteConstraints(624, 72, 195, 31));

        jPanel34.setBackground(new java.awt.Color(0, 51, 51));
        jPanel34.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel80.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel80.setForeground(new java.awt.Color(255, 255, 255));
        jLabel80.setText("Home");
        jPanel34.add(jLabel80, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 11, -1, 40));

        jPanel33.add(jPanel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 60));

        jButton4.setBackground(new java.awt.Color(51, 255, 204));
        jButton4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton4.setText("Refresh");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton4MouseExited(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel33.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 10, -1, 40));

        jPanelHome.add(jPanel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 850, 60));

        jPanel17.setBackground(new java.awt.Color(0, 51, 51));
        jPanel17.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LblTotalUser.setBackground(new java.awt.Color(255, 255, 255));
        LblTotalUser.setFont(new java.awt.Font("Times New Roman", 1, 150)); // NOI18N
        LblTotalUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblTotalUser.setText("0");
        LblTotalUser.setOpaque(true);
        jPanel17.add(LblTotalUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 250, 130));

        jLabel30.setBackground(new java.awt.Color(255, 255, 255));
        jLabel30.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("TOTAL  USERS");
        jLabel30.setOpaque(true);
        jPanel17.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 250, -1));

        jPanelHome.add(jPanel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 290, 210));

        jPanel18.setBackground(new java.awt.Color(0, 51, 51));
        jPanel18.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LblTotalProducts.setBackground(new java.awt.Color(255, 255, 255));
        LblTotalProducts.setFont(new java.awt.Font("Times New Roman", 1, 150)); // NOI18N
        LblTotalProducts.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblTotalProducts.setText("0");
        LblTotalProducts.setOpaque(true);
        jPanel18.add(LblTotalProducts, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 270, 120));

        jLabel37.setBackground(new java.awt.Color(255, 255, 255));
        jLabel37.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("TOTAL  PRODUCTS");
        jLabel37.setOpaque(true);
        jPanel18.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 270, -1));

        jPanelHome.add(jPanel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 310, 210));

        jPanel19.setBackground(new java.awt.Color(0, 51, 51));
        jPanel19.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LblTotalSuppliers.setBackground(new java.awt.Color(255, 255, 255));
        LblTotalSuppliers.setFont(new java.awt.Font("Times New Roman", 1, 150)); // NOI18N
        LblTotalSuppliers.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblTotalSuppliers.setText("0");
        LblTotalSuppliers.setOpaque(true);
        jPanel19.add(LblTotalSuppliers, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 270, 150));

        jLabel49.setBackground(new java.awt.Color(255, 255, 255));
        jLabel49.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel49.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel49.setText("TOTAL  SUPPLIERS");
        jLabel49.setOpaque(true);
        jPanel19.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 270, -1));

        jPanelHome.add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 320, 300, 240));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/150525da4a62d99d98865b8b90b5bb7a.jpg"))); // NOI18N
        jPanelHome.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 800, 490));

        getContentPane().add(jPanelHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 850, 570));

        jPanelAddItem.setBackground(new java.awt.Color(255, 255, 255));
        jPanelAddItem.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelAddItem.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jPanelAddItemMouseWheelMoved(evt);
            }
        });
        jPanelAddItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanelAddItemMouseEntered(evt);
            }
        });
        jPanelAddItem.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(0, 51, 51));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel29.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Search:");
        jPanel4.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, -1, 50));

        textSearch.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        textSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textSearchKeyTyped(evt);
            }
        });
        jPanel4.add(textSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 20, 195, 31));

        jLabel111.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel111.setForeground(new java.awt.Color(255, 255, 255));
        jLabel111.setText("Item Details");
        jPanel4.add(jLabel111, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 12, -1, 40));
        jPanel4.add(jDateChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 200, 30));

        jButton14.setBackground(new java.awt.Color(0, 51, 51));
        jButton14.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton14.setForeground(new java.awt.Color(255, 255, 255));
        jButton14.setText("Find");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, 80, 30));

        jPanelAddItem.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 850, 60));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel5.setText("Receive Date: ");
        jPanelAddItem.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, 20));

        jLabel20.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel20.setText("Item No.: ");
        jPanelAddItem.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, -1, -1));

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel21.setText("Item Name:");
        jPanelAddItem.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 80, 40));

        jLabel22.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel22.setText("Description:");
        jPanelAddItem.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, 20));

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel23.setText("Per Box:");
        jPanelAddItem.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 270, -1, 30));

        jLabel24.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel24.setText("Quantity:");
        jPanelAddItem.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 290, -1, 50));

        jLabel26.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel26.setText("Total Selling  price:");
        jPanelAddItem.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, 150, 50));

        jLabel27.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel27.setText("Amount to be Paid:");
        jPanelAddItem.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 370, 130, 50));

        textReceiving.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        textReceiving.setText("Receving No.");
        jPanelAddItem.add(textReceiving, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, -1, 30));

        txtamtTobePaid.setEditable(false);
        txtamtTobePaid.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtamtTobePaid.setText("0.0");
        txtamtTobePaid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtamtTobePaidKeyTyped(evt);
            }
        });
        jPanelAddItem.add(txtamtTobePaid, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 380, 100, 30));

        textItemName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        textItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textItemNameKeyTyped(evt);
            }
        });
        jPanelAddItem.add(textItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 161, 20));

        textDescription.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        textDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textDescriptionKeyTyped(evt);
            }
        });
        jPanelAddItem.add(textDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 190, 161, 20));
        jPanelAddItem.add(jDateChooserExperyDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 160, 20));
        jPanelAddItem.add(jDateChooserReceiveDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 160, 20));

        textItemNumber.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        textItemNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textItemNumberKeyTyped(evt);
            }
        });
        jPanelAddItem.add(textItemNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 161, 20));

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanelAddItem.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, 570, 280));

        textQuantity.setEditable(false);
        textQuantity.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        textQuantity.setText("0");
        textQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textQuantityActionPerformed(evt);
            }
        });
        textQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textQuantityKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textQuantityKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textQuantityKeyTyped(evt);
            }
        });
        jPanelAddItem.add(textQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 300, 100, 30));

        textBuyingPrice.setBackground(new java.awt.Color(204, 255, 204));
        textBuyingPrice.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        textBuyingPrice.setText("0.0");
        textBuyingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBuyingPriceActionPerformed(evt);
            }
        });
        textBuyingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textBuyingPriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textBuyingPriceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textBuyingPriceKeyTyped(evt);
            }
        });
        jPanelAddItem.add(textBuyingPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 390, 100, 30));

        txtBuyingPerUnit.setEditable(false);
        txtBuyingPerUnit.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtBuyingPerUnit.setText("0.0");
        txtBuyingPerUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuyingPerUnitActionPerformed(evt);
            }
        });
        txtBuyingPerUnit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBuyingPerUnitKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuyingPerUnitKeyTyped(evt);
            }
        });
        jPanelAddItem.add(txtBuyingPerUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 450, 100, 30));

        jLabel79.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel79.setText("Receving No.");
        jPanelAddItem.add(jLabel79, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 30));

        txtPerBox.setBackground(new java.awt.Color(204, 255, 204));
        txtPerBox.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtPerBox.setText("0");
        txtPerBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPerBoxActionPerformed(evt);
            }
        });
        txtPerBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPerBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPerBoxKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPerBoxKeyTyped(evt);
            }
        });
        jPanelAddItem.add(txtPerBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, 100, 30));

        txtBoxes.setBackground(new java.awt.Color(204, 255, 204));
        txtBoxes.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtBoxes.setText("0");
        txtBoxes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBoxesActionPerformed(evt);
            }
        });
        txtBoxes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBoxesKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBoxesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBoxesKeyTyped(evt);
            }
        });
        jPanelAddItem.add(txtBoxes, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, 100, 30));

        jLabel53.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel53.setText("Expery Date:");
        jPanelAddItem.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        jLabel59.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel59.setText("Boxes:");
        jPanelAddItem.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 240, -1, 30));

        jLabel61.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel61.setText("Suppliers:");
        jPanelAddItem.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 460, 70, 30));

        jComboBoxSupplier.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBoxSupplier.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        jComboBoxSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSupplierActionPerformed(evt);
            }
        });
        jPanelAddItem.add(jComboBoxSupplier, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 470, 160, 30));

        jLabel62.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel62.setText("Amount Paid:");
        jPanelAddItem.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 400, 100, 40));

        txtAmtPaid.setBackground(new java.awt.Color(204, 255, 204));
        txtAmtPaid.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtAmtPaid.setText("0.0");
        txtAmtPaid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAmtPaidKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAmtPaidKeyTyped(evt);
            }
        });
        jPanelAddItem.add(txtAmtPaid, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 410, 100, 30));

        jLabel63.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel63.setText("Amount Left:");
        jPanelAddItem.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 430, 90, 40));

        txtAmtLeft.setEditable(false);
        txtAmtLeft.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtAmtLeft.setText("0.0");
        txtAmtLeft.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAmtLeftKeyTyped(evt);
            }
        });
        jPanelAddItem.add(txtAmtLeft, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 440, 100, 30));

        jLabel28.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel28.setText("Total Buyning price:");
        jPanelAddItem.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 160, 30));

        textTotalSellingPrice.setEditable(false);
        textTotalSellingPrice.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        textTotalSellingPrice.setText("0.0");
        textTotalSellingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textTotalSellingPriceActionPerformed(evt);
            }
        });
        textTotalSellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textTotalSellingPriceKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textTotalSellingPriceKeyTyped(evt);
            }
        });
        jPanelAddItem.add(textTotalSellingPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 480, 100, 30));

        jLabel31.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel31.setText("Selling  price Per Unit:");
        jPanelAddItem.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 500, 150, 50));

        jPanel21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel21.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnPrint.setBackground(new java.awt.Color(0, 51, 51));
        btnPrint.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnPrint.setForeground(new java.awt.Color(255, 255, 255));
        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        jPanel21.add(btnPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 80, 40));

        btnSave.setBackground(new java.awt.Color(0, 51, 51));
        btnSave.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel21.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 80, 40));

        btnUpdate.setBackground(new java.awt.Color(0, 51, 51));
        btnUpdate.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel21.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 70, 40));

        btnDelete.setBackground(new java.awt.Color(0, 51, 51));
        btnDelete.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel21.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 70, 40));

        btnClear.setBackground(new java.awt.Color(0, 51, 51));
        btnClear.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel21.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 70, 40));

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton5.setText("Refresh");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel21.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 90, 40));

        jPanelAddItem.add(jPanel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 390, 280, 110));

        jLabel32.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel32.setText("Buying  price Per Unit:");
        jPanelAddItem.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, 160, 50));

        txtSellingPerUnit.setEditable(false);
        txtSellingPerUnit.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtSellingPerUnit.setText("0.0");
        txtSellingPerUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSellingPerUnitActionPerformed(evt);
            }
        });
        txtSellingPerUnit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSellingPerUnitKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSellingPerUnitKeyTyped(evt);
            }
        });
        jPanelAddItem.add(txtSellingPerUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 510, 100, 30));

        jLabel25.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel25.setText("Additional Quantity:");
        jPanelAddItem.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 140, 30));

        textAdditionalQuantity.setBackground(new java.awt.Color(204, 255, 204));
        textAdditionalQuantity.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        textAdditionalQuantity.setText("0");
        textAdditionalQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textAdditionalQuantityActionPerformed(evt);
            }
        });
        textAdditionalQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textAdditionalQuantityKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textAdditionalQuantityKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAdditionalQuantityKeyTyped(evt);
            }
        });
        jPanelAddItem.add(textAdditionalQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, 100, 30));

        jLabel33.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel33.setText("Percentage:");
        jPanelAddItem.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 420, 80, 30));

        txtPercentage.setEditable(false);
        txtPercentage.setBackground(new java.awt.Color(204, 255, 204));
        txtPercentage.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtPercentage.setText("0");
        txtPercentage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPercentageActionPerformed(evt);
            }
        });
        txtPercentage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPercentageKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPercentageKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPercentageKeyTyped(evt);
            }
        });
        jPanelAddItem.add(txtPercentage, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 420, 100, 30));

        jLabel64.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel64.setText("Paid By");
        jPanelAddItem.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 70, 30));

        jComboBoxPaidBy.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBoxPaidBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Cash", "Cheque" }));
        jComboBoxPaidBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPaidByActionPerformed(evt);
            }
        });
        jPanelAddItem.add(jComboBoxPaidBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 500, 130, 30));
        jPanelAddItem.add(jDateChooserPayment, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 530, 130, 30));

        jLabel55.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel55.setText("Date Paid:");
        jPanelAddItem.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 530, -1, 30));

        txtTotalQty.setEditable(false);
        txtTotalQty.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtTotalQty.setText("0");
        txtTotalQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalQtyActionPerformed(evt);
            }
        });
        txtTotalQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTotalQtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTotalQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTotalQtyKeyTyped(evt);
            }
        });
        jPanelAddItem.add(txtTotalQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 100, 30));

        jLabel34.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel34.setText("Total  Quantity:");
        jPanelAddItem.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, 130, 30));

        getContentPane().add(jPanelAddItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 850, 570));

        jPanelSell.setBackground(new java.awt.Color(255, 255, 255));
        jPanelSell.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelSell.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanelSellMouseEntered(evt);
            }
        });
        jPanelSell.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel8.setBackground(new java.awt.Color(0, 51, 51));

        jLabel35.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("Item Details");

        jLabel36.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("Search By:");

        jComboBox4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tittle" }));

        textSearch3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        textSearch3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textSearch3KeyTyped(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(0, 51, 51));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtSalesNum.setEditable(false);
        txtSalesNum.setBackground(new java.awt.Color(204, 255, 204));
        txtSalesNum.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtSalesNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalesNumKeyTyped(evt);
            }
        });
        jPanel9.add(txtSalesNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 10, 40, 40));

        jLabel45.setFont(new java.awt.Font("Andalus", 3, 18)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(255, 255, 255));
        jLabel45.setText("Item Order Menu");
        jPanel9.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 40));

        txtSearch.setBackground(new java.awt.Color(204, 255, 204));
        txtSearch.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtSearch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });
        jPanel9.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 130, 31));

        jLabel108.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel108.setForeground(new java.awt.Color(255, 255, 255));
        jLabel108.setText("Quantity:");
        jPanel9.add(jLabel108, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, -1, 50));

        txtBuyingQty.setEditable(false);
        txtBuyingQty.setBackground(new java.awt.Color(204, 255, 204));
        txtBuyingQty.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtBuyingQty.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBuyingQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBuyingQtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuyingQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuyingQtyKeyTyped(evt);
            }
        });
        jPanel9.add(txtBuyingQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, 80, 31));

        jLabel103.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel103.setForeground(new java.awt.Color(255, 255, 255));
        jLabel103.setText("Search Item:");
        jPanel9.add(jLabel103, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, 50));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 819, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel35)
                        .addGap(167, 167, 167)
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(textSearch3, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textSearch3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanelSell.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 830, 60));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Item Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 18))); // NOI18N
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton7.setBackground(new java.awt.Color(0, 51, 51));
        jButton7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("jButton7");
        jPanel7.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 580, -1, -1));

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtSellingPRice.setEditable(false);
        txtSellingPRice.setBackground(new java.awt.Color(204, 255, 204));
        txtSellingPRice.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtSellingPRice.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSellingPRice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSellingPRiceKeyTyped(evt);
            }
        });
        jPanel11.add(txtSellingPRice, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 80, 30));

        txtAvailable.setEditable(false);
        txtAvailable.setBackground(new java.awt.Color(204, 255, 204));
        txtAvailable.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtAvailable.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAvailable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAvailableKeyTyped(evt);
            }
        });
        jPanel11.add(txtAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 80, 30));

        textStudentID3.setEditable(false);
        textStudentID3.setBackground(new java.awt.Color(204, 255, 204));
        textStudentID3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        textStudentID3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textStudentID3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textStudentID3KeyTyped(evt);
            }
        });
        jPanel11.add(textStudentID3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 160, 80, 30));

        txtAmount.setEditable(false);
        txtAmount.setBackground(new java.awt.Color(204, 255, 204));
        txtAmount.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAmount.setText("00.0");
        txtAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAmountKeyTyped(evt);
            }
        });
        jPanel11.add(txtAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 80, 30));

        textStudentID.setEditable(false);
        textStudentID.setBackground(new java.awt.Color(204, 255, 204));
        textStudentID.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        textStudentID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textStudentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textStudentIDActionPerformed(evt);
            }
        });
        textStudentID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textStudentIDKeyTyped(evt);
            }
        });
        jPanel11.add(textStudentID, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 80, 30));

        jLabel39.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel39.setText("Receive Number");
        jPanel11.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 140, 30));

        jLabel46.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel46.setText("AMOUNT");
        jPanel11.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 190, 100, 40));

        jLabel47.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel47.setText("SELLING PRICE PER UNIT");
        jPanel11.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 180, 30));

        jLabel50.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel50.setText("DESCRIPTION");
        jPanel11.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 130, 40));

        jLabel52.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel52.setText("AVAILABILITY      STOCK");
        jPanel11.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 240, 40));

        txtPreviousQty.setEditable(false);
        txtPreviousQty.setBackground(new java.awt.Color(204, 255, 204));
        txtPreviousQty.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtPreviousQty.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPreviousQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPreviousQtyKeyTyped(evt);
            }
        });
        jPanel11.add(txtPreviousQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, 80, 30));

        txtReceiveNum.setEditable(false);
        txtReceiveNum.setBackground(new java.awt.Color(204, 255, 204));
        txtReceiveNum.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtReceiveNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtReceiveNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReceiveNumActionPerformed(evt);
            }
        });
        txtReceiveNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtReceiveNumKeyTyped(evt);
            }
        });
        jPanel11.add(txtReceiveNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 80, 30));

        textStudentID5.setEditable(false);
        textStudentID5.setBackground(new java.awt.Color(204, 255, 204));
        textStudentID5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        textStudentID5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textStudentID5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textStudentID5KeyTyped(evt);
            }
        });
        jPanel11.add(textStudentID5, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 80, 30));

        jLabel101.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel101.setText("STOCK LEFT");
        jPanel11.add(jLabel101, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 120, 40));

        txtBuyingPrice.setEditable(false);
        txtBuyingPrice.setBackground(new java.awt.Color(204, 255, 204));
        txtBuyingPrice.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtBuyingPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBuyingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuyingPriceKeyTyped(evt);
            }
        });
        jPanel11.add(txtBuyingPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 70, 30));

        jLabel57.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel57.setText("BUYING PRICE PER UNIT");
        jPanel11.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, -1, 30));

        jLabel58.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel58.setText("PROFIT");
        jPanel11.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 70, 20));

        txtProfit.setEditable(false);
        txtProfit.setBackground(new java.awt.Color(204, 255, 204));
        txtProfit.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtProfit.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtProfit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtProfitKeyTyped(evt);
            }
        });
        jPanel11.add(txtProfit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 70, 20));

        jLabel112.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel112.setText("PROFIT:");
        jPanel11.add(jLabel112, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 80, 30));

        jbPprofit.setBackground(new java.awt.Color(0, 51, 51));
        jbPprofit.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jbPprofit.setForeground(new java.awt.Color(255, 255, 255));
        jbPprofit.setText("   00.0");
        jbPprofit.setOpaque(true);
        jPanel11.add(jbPprofit, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 40, 40));

        jPanel7.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 370, 230));

        jPanelSell.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 400, 270));

        jPanel32.setBackground(new java.awt.Color(255, 255, 255));
        jPanel32.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Item Manager", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 18))); // NOI18N
        jPanel32.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtItemNum.setEditable(false);
        txtItemNum.setBackground(new java.awt.Color(204, 255, 204));
        txtItemNum.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtItemNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtItemNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtItemNumKeyTyped(evt);
            }
        });
        jPanel13.add(txtItemNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 100, 31));

        jLabel51.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel51.setText("Item Name:");
        jPanel13.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 110, 40));

        btnAdd.setBackground(new java.awt.Color(0, 51, 51));
        btnAdd.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel13.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 70, 30));

        jButton16.setBackground(new java.awt.Color(0, 51, 51));
        jButton16.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton16.setForeground(new java.awt.Color(255, 255, 255));
        jButton16.setText("Cancel");
        jButton16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton16MousePressed(evt);
            }
        });
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton16, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, 80, 30));

        txtItemName.setEditable(false);
        txtItemName.setBackground(new java.awt.Color(204, 255, 204));
        txtItemName.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtItemName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemNameActionPerformed(evt);
            }
        });
        txtItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtItemNameKeyTyped(evt);
            }
        });
        jPanel13.add(txtItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 160, 30));

        jLabel109.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel109.setText("Discount(%):");
        jPanel13.add(jLabel109, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 110, 30));

        txtDiscountPercentage.setEditable(false);
        txtDiscountPercentage.setBackground(new java.awt.Color(204, 255, 204));
        txtDiscountPercentage.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtDiscountPercentage.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDiscountPercentage.setText("0.0");
        txtDiscountPercentage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountPercentageKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiscountPercentageKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDiscountPercentageKeyTyped(evt);
            }
        });
        jPanel13.add(txtDiscountPercentage, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, 80, 30));

        jLabel110.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel110.setText("Item Number:");
        jPanel13.add(jLabel110, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 110, 40));

        jLabel113.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel113.setText("Discount Amount:");
        jPanel13.add(jLabel113, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 90, 150, 30));

        txtDiscountAmt.setEditable(false);
        txtDiscountAmt.setBackground(new java.awt.Color(204, 255, 204));
        txtDiscountAmt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtDiscountAmt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDiscountAmt.setText("0.0");
        txtDiscountAmt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountAmtKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiscountAmtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDiscountAmtKeyTyped(evt);
            }
        });
        jPanel13.add(txtDiscountAmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 120, 80, 31));

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select...", "No Discount", "Discount(GHS)", "Discount(%)" }));
        jComboBox1.setEnabled(false);
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jPanel13.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 100, -1));

        jPanel32.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 340, 160));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));
        jPanel20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel20.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jblAmountDue1.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jblAmountDue1.setText("   00.0");
        jPanel20.add(jblAmountDue1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 150, 60));

        jPanel6.add(jPanel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 180, 60));

        jblAmountDue.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jblAmountDue.setText("   00.0");
        jPanel6.add(jblAmountDue, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 150, 50));

        jPanel32.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 150, 50));

        jLabel54.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel54.setText("AFTER DISCOUNT");
        jPanel32.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 190, -1, 20));

        btnProceed.setBackground(new java.awt.Color(0, 51, 51));
        btnProceed.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnProceed.setForeground(new java.awt.Color(255, 255, 255));
        btnProceed.setText("Proceed");
        btnProceed.setEnabled(false);
        btnProceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedActionPerformed(evt);
            }
        });
        jPanel32.add(btnProceed, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 260, 110, 30));

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel14.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblAMountPaid.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        lblAMountPaid.setText("00.0");
        jPanel14.add(lblAMountPaid, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 50));

        jPanel32.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 210, 180, 50));

        jLabel114.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jLabel114.setText("AMOUNT DUE");
        jPanel32.add(jLabel114, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, 10));

        jPanelSell.add(jPanel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 250, 390, 300));

        jTable2.setAutoCreateRowSorter(true);
        jTable2.setBackground(new java.awt.Color(204, 255, 204));
        jTable2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jPanelSell.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 90, 340, 150));

        jTable3.setAutoCreateRowSorter(true);
        jTable3.setBackground(new java.awt.Color(204, 255, 204));
        jTable3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable3);

        jPanelSell.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 430, 140));
        jPanelSell.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 450, 170));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        jPanelSell.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 80, 360, 170));

        getContentPane().add(jPanelSell, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 850, 560));

        jPanelReport.setBackground(new java.awt.Color(255, 255, 255));
        jPanelReport.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelReport.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel15.setBackground(new java.awt.Color(0, 51, 51));
        jPanel15.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel44.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setText("Item Details");
        jPanel15.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 66, -1, 40));

        jLabel48.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(255, 255, 255));
        jLabel48.setText("Search By:");
        jPanel15.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 66, -1, 40));

        jComboBox6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tittle" }));
        jPanel15.add(jComboBox6, new org.netbeans.lib.awtextra.AbsoluteConstraints(397, 66, 182, 40));

        textSearch7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        textSearch7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textSearch7KeyTyped(evt);
            }
        });
        jPanel15.add(textSearch7, new org.netbeans.lib.awtextra.AbsoluteConstraints(624, 72, 195, 31));

        jPanel16.setBackground(new java.awt.Color(0, 51, 51));
        jPanel16.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel82.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel82.setForeground(new java.awt.Color(255, 255, 255));
        jLabel82.setText("Sale Report");
        jPanel16.add(jLabel82, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 11, -1, 40));

        jPanel15.add(jPanel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 60));

        jPanelReport.add(jPanel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 820, 50));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel36.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel36.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton17.setBackground(new java.awt.Color(0, 51, 51));
        jButton17.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton17.setForeground(new java.awt.Color(255, 255, 255));
        jButton17.setText("Find");
        jPanel36.add(jButton17, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 530, 80, -1));

        jPanel37.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel37.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        totalSales.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        totalSales.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalSales.setText("0.0");
        totalSales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                totalSalesKeyTyped(evt);
            }
        });
        jPanel37.add(totalSales, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 161, 31));

        txtTransaction.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        txtTransaction.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTransaction.setText("0");
        txtTransaction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTransactionKeyTyped(evt);
            }
        });
        jPanel37.add(txtTransaction, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 161, 31));

        netSales.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        netSales.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        netSales.setText("0.0");
        netSales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                netSalesKeyTyped(evt);
            }
        });
        jPanel37.add(netSales, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 161, 31));

        jLabel85.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel85.setText("Net Income");
        jPanel37.add(jLabel85, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 100, 30));

        jLabel87.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel87.setText("Transactions");
        jPanel37.add(jLabel87, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 100, 30));

        jLabel88.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel88.setText("Total Sales");
        jPanel37.add(jLabel88, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 10, 90, 30));

        jButton51.setBackground(new java.awt.Color(0, 51, 51));
        jButton51.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton51.setForeground(new java.awt.Color(255, 255, 255));
        jButton51.setText("Clear");
        jButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton51ActionPerformed(evt);
            }
        });
        jPanel37.add(jButton51, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 150, 80, 30));

        jPanel36.add(jPanel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 300, 190));

        jPanel1.add(jPanel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 340, 220));

        jLabel83.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel83.setText("Sales Valuate");
        jPanel1.add(jLabel83, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, -1, 40));

        jTable7.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(jTable7);

        jPanel1.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 780, 160));

        jPanel39.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel39.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        toDate.setDateFormatString("yyy-MM-dd");
        jPanel39.add(toDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 200, 30));

        jLabel56.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel56.setText("Select date");
        jPanel39.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, -1, 30));

        fromDate.setDateFormatString("yyy-MM-dd");
        fromDate.setMaxSelectableDate(new java.util.Date(253370797303000L));
        jPanel39.add(fromDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, 200, 30));

        jLabel81.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel81.setText("To");
        jPanel39.add(jLabel81, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 20, 40));

        jLabel86.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel86.setText("User");
        jPanel39.add(jLabel86, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, -1, 30));

        jButton55.setBackground(new java.awt.Color(0, 51, 51));
        jButton55.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton55.setForeground(new java.awt.Color(255, 255, 255));
        jButton55.setText("Search");
        jButton55.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton55ActionPerformed(evt);
            }
        });
        jPanel39.add(jButton55, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 180, 80, 30));

        jComboBoxUsers.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBoxUsers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        jComboBoxUsers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxUsersItemStateChanged(evt);
            }
        });
        jPanel39.add(jComboBoxUsers, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 170, 30));

        jLabel89.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel89.setText("From");
        jPanel39.add(jLabel89, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, -1, 30));

        jPanel1.add(jPanel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 260, 430, 220));

        jButton56.setBackground(new java.awt.Color(0, 51, 51));
        jButton56.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton56.setForeground(new java.awt.Color(255, 255, 255));
        jButton56.setText("Print");
        jButton56.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton56ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton56, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 10, 80, 30));

        jPanelReport.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 810, 490));

        getContentPane().add(jPanelReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 840, 560));

        jPanelPrintimg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelPrintimg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane7.setViewportView(jTextArea1);

        jPanelPrintimg.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 530));

        getContentPane().add(jPanelPrintimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, -1, -1));

        jMenu1.setText("Options");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem8.setText("Sales History");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem7.setText("Manage Users");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem2.setText("Check Logins");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem5.setText("Supplier");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setText("Creditor");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem3.setText("Company Information");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Change Password");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem4.setText("Profile");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem12.setText("BackUp");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem12);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Check");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenuItem9.setText("Almost Finished");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem10.setText("Near Expire");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuItem11.setText("Expired");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem11);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseEntered
        Color bgColor = Color.decode("#33FFCC");
        jLabel6.setBackground(bgColor);
    }//GEN-LAST:event_jLabel6MouseEntered

    private void jLabel6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseExited
        Color bgColor = Color.decode("#ffffff");
        jLabel6.setBackground(bgColor);
    }//GEN-LAST:event_jLabel6MouseExited

    private void jLabelHomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelHomeMouseEntered
//jPanelHome.setLocation(210, 80);
//        Color bgColor = Color.decode("#fed8b1");
//        Font f = new Font("serif", Font.BOLD,20);
//        jLabel3.setBackground(bgColor);
//        jLabel3.setForeground(Color.black);
        // jLabel3.setFont(f);
    }//GEN-LAST:event_jLabelHomeMouseEntered

    private void jLabelHomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelHomeMouseExited
//        Color bgColor = Color.decode("#003333");
//        jLabel3.setBackground(bgColor);
//        jLabel3.setForeground(Color.white);
//        Font f = new Font("Times New Roman", Font.BOLD,20);
//        jLabel3.setFont(f);
    }//GEN-LAST:event_jLabelHomeMouseExited

    private void jLabelHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelHomeMouseClicked
        jPanelHome.show();
        
     
    }//GEN-LAST:event_jLabelHomeMouseClicked

    private void jLabelItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelItemMouseClicked
      
        jPanelAddItem.show();
           showallitem();
           
           
    }//GEN-LAST:event_jLabelItemMouseClicked

    private void jLabelItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelItemMouseEntered
//        Color bgColor = Color.decode("#fed8b1");
//        Font f = new Font("serif", Font.BOLD,20);
//        jLabel9.setBackground(bgColor);
//        jLabel9.setForeground(Color.black);
    }//GEN-LAST:event_jLabelItemMouseEntered

    private void jLabelItemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelItemMouseExited
//                Color bgColor = Color.decode("#003333");
//        jLabel9.setBackground(bgColor);
//        jLabel9.setForeground(Color.white);
//        Font f = new Font("Times New Roman", Font.BOLD,20);
//        jLabel9.setFont(f);
    }//GEN-LAST:event_jLabelItemMouseExited

    private void jLabelSalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelSalesMouseClicked
        jPanelSell.show();
      
        salesNumber();     
        clearSale();
    }//GEN-LAST:event_jLabelSalesMouseClicked

    private void jLabelSalesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelSalesMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelSalesMouseEntered

    private void jLabelSalesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelSalesMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelSalesMouseExited

    private void jLabel1ReportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1ReportMouseClicked
        jPanelReport.show();
       showallSalesHistory();
        
    }//GEN-LAST:event_jLabel1ReportMouseClicked

    private void jLabel1ReportMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1ReportMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1ReportMouseEntered

    private void jLabel1ReportMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1ReportMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1ReportMouseExited

    private void txtamtTobePaidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtamtTobePaidKeyTyped
        if (!Character.isAlphabetic(evt.getKeyChar()) && !Character.isSpaceChar(evt.getKeyChar())) {

        } else if (txtamtTobePaid.getText().trim().length() == 0 && Character.isLowerCase(evt.getKeyChar())) {
            evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        }
    }//GEN-LAST:event_txtamtTobePaidKeyTyped

    private void textSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSearchKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textSearchKeyTyped

    private void textItemNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textItemNameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textItemNameKeyTyped

    private void textDescriptionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textDescriptionKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textDescriptionKeyTyped

    private void textItemNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textItemNumberKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textItemNumberKeyTyped

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
          int p = JOptionPane.showConfirmDialog(null, "You can't Recover it, Are you sure you want to DELETE this Item? Confirm and Proceed ","",JOptionPane.YES_NO_OPTION);
        if(p==0){         
                String sql = "delete from stock where receiving_number='" + textReceiving.getText().trim() + "' ";
                    try {
                        ps = con.prepareStatement(sql);
                        ps.execute();
                        showallitem();
                        showProductinSelling();
                        JOptionPane.showMessageDialog(null, "Item has been deleted Successfully", "Success Operation", 1);
                  clear();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage(), "Error", 2);
                        clear();
                    }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void textSearch3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSearch3KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textSearch3KeyTyped

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed

         

//Deleting from Temp table
                String sql3="delete  from temp ";
        try {
            ps =con.prepareStatement(sql3);
              ps.execute();
               clearSale(); 
        } catch (SQLException ex) {
            Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
        }
               showallTemptable();
    }//GEN-LAST:event_jButton16ActionPerformed

    private void txtAvailableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAvailableKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAvailableKeyTyped

    private void textStudentID3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textStudentID3KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textStudentID3KeyTyped

    private void txtAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmountKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmountKeyTyped

    private void textStudentIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textStudentIDKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textStudentIDKeyTyped

    private void txtSellingPRiceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPRiceKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSellingPRiceKeyTyped

    private void txtItemNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNumKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemNumKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        
        
    }//GEN-LAST:event_formWindowOpened

    private void jLabelSalesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelSalesMousePressed
        
        jPanelAddItem.hide();

        jPanelReport.hide();
        jPanelHome.hide();
        
        Color bgColor = Color.decode("#fed8b1");
        Color bgColor1 = Color.decode("#003333");
         
         jLabelItem.setBackground(bgColor1);
        jLabelItem.setForeground(Color.white);

        jLabelHome.setBackground(bgColor1);
        jLabelHome.setForeground(Color.white);


        jLabel1Report.setBackground(bgColor1);
        jLabel1Report.setForeground(Color.white);



        jLabelSales.setBackground(bgColor);
        jLabelSales.setForeground(Color.black);
        Font f = new Font("Times New Roman", Font.BOLD, 20);
        jLabelSales.setFont(f);
        jLabelSales.setForeground(Color.black);
        jTextArea1.setText("");
        billHeder();

    
        
      
        
        
    }//GEN-LAST:event_jLabelSalesMousePressed

    private void textSearch7KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSearch7KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textSearch7KeyTyped

    private void textSearch19KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSearch19KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textSearch19KeyTyped

    private void totalSalesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalSalesKeyTyped
        if(!Character.isAlphabetic(evt.getKeyChar())&& !Character.isSpaceChar(evt.getKeyChar())){

        }else if(textStudentID.getText().trim().length()==0 && Character.isLowerCase(evt.getKeyChar())) {
            evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        }
    }//GEN-LAST:event_totalSalesKeyTyped

    private void txtTransactionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTransactionKeyTyped
        if(!Character.isAlphabetic(evt.getKeyChar())&& !Character.isSpaceChar(evt.getKeyChar())){

        }else if(textStudentID.getText().trim().length()==0 && Character.isLowerCase(evt.getKeyChar())) {
            evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        }
    }//GEN-LAST:event_txtTransactionKeyTyped

    private void netSalesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_netSalesKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_netSalesKeyTyped

    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
       clearReportPanel();
    }//GEN-LAST:event_jButton51ActionPerformed

    private void jButton55ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton55ActionPerformed
        double profit = 0;
        DecimalFormat df = new  DecimalFormat("#.##");
        String user = jComboBoxUsers.getSelectedItem().toString();
    if(     fromDate.getDate() == null && toDate.getDate()== null ){
        JOptionPane.showMessageDialog(this, "Please fill the date fields","Error", JOptionPane.ERROR_MESSAGE);
        
    
    }else if(toDate.getDate()== null){
        try{
            SimpleDateFormat dateFormat=new SimpleDateFormat("yyy-MM-dd");
               String start=dateFormat.format(fromDate.getDate());
          
               //Total Sales
       String sql = "select * from sale_history where date like '"+start+"%' ";
       ps=con.prepareStatement(sql);
       rs=ps.executeQuery();
         double amount=0; 
        while(rs.next()){
          
            amount += Double.parseDouble(rs.getString("AmountPaid")); 
            totalSales.setText(String.valueOf(df.format(amount)));
            
            profit += Double.parseDouble(rs.getString("profit")); 
            netSales.setText(String.valueOf(df.format(profit)));
        }
        
               //Query for number of transactions
          stm=con.createStatement();
             String sql1="Select  count(sales_number)  AS TotalTransaction FROM sale_history "
                +" WHERE  date like '"+start+"%' ";
        rs=stm.executeQuery(sql1);
         rs.next();
            int number = rs.getInt("TotalTransaction");
              txtTransaction.setText(String.valueOf(number));
              
          String sql2="Select  * from sale_history "
        + "where date like '"+start+"%' ";

        try {
            ps=con.prepareStatement(sql2);
            rs=ps.executeQuery();
            jTable7.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }
               
       
         
    }
    catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
    
    }
    
    else if(toDate.getDate()!= null  && fromDate.getDate()!= null ) {
        try{
            
              SimpleDateFormat dateFormat=new SimpleDateFormat("yyy-MM-dd");
                String startDate=dateFormat.format(fromDate.getDate());
                String endDate=dateFormat.format(toDate.getDate());
              
             
               //Total Sales
     //  String sql = "select * from sale_history where 'date' between '"+start+"' and '"+end+"' ";
      stm=con.createStatement(); 
     String sql = "select sum(AmountPaid) AS TotalAmount from sale_history "
             + "where date between '"+startDate+"' and '"+endDate+"' ";
          rs=stm.executeQuery(sql);
         rs.next();
         //double amount=0; 
          
             double num = rs.getDouble("TotalAmount");
            totalSales.setText(String.valueOf(df.format(num)));
            /////////////////////////////////////////////////////////////////
            
          String sql2="Select * from sale_history "
        + "WHERE  date between '"+startDate+"' and '"+endDate+"'  ";

        try {
            ps=con.prepareStatement(sql2);
            rs=ps.executeQuery();
             while(rs.next()){
           profit += Double.parseDouble(rs.getString("profit")); 
            netSales.setText(String.valueOf(df.format(profit)));
           } 
            

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }
            
          
       
        
//               //Query for number of transactions
          stm=con.createStatement();
     String sql1="Select  count(sales_number)  AS TotalTransaction FROM sale_history "
                +" WHERE  date between '"+startDate+"' and '"+endDate+"'  ";
        rs=stm.executeQuery(sql1);
         rs.next();
            int number = rs.getInt("TotalTransaction");
              txtTransaction.setText(String.valueOf(number));
              
              
              ////////
              
                 String sql3="Select * from sale_history "
        + "WHERE  date between '"+startDate+"' and '"+endDate+"'  ";

        try {
            ps=con.prepareStatement(sql3);
            rs=ps.executeQuery();
            jTable7.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }
               
       
         
    }
    catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
        
    }else if(toDate.getDate()!= null  &&  !user.equals("") ){
            try{
            SimpleDateFormat dateFormat=new SimpleDateFormat("yyy-MM-dd");
               String start=dateFormat.format(fromDate.getDate());
          
               //Total Sales
       String sql = "select * from sale_history where date like '"+start+"%' "
               + "and user = '"+user+"'  ";
       ps=con.prepareStatement(sql);
       rs=ps.executeQuery();
         double amount=0; 
        while(rs.next()){
          
            amount += Double.parseDouble(rs.getString("AmountPaid")); 
            totalSales.setText(String.valueOf(df.format(amount)));
            
             profit += Double.parseDouble(rs.getString("profit")); 
            netSales.setText(String.valueOf(df.format(profit)));
        }
        
               //Query for number of transactions
          stm=con.createStatement();
             String sql1="Select  count(sales_number)  AS TotalTransaction FROM sale_history "
                +" WHERE  date like '"+start+"%' and user ='"+user+"'";
        rs=stm.executeQuery(sql1);
         rs.next();
            int number = rs.getInt("TotalTransaction");
              txtTransaction.setText(String.valueOf(number));
              ///////
              
            String sql2="Select * from sale_history "
        + " WHERE  date like '"+start+"%' and user ='"+user+"'";

        try {
            ps=con.prepareStatement(sql2);
            rs=ps.executeQuery();
            jTable7.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }     
               
       
         
    }
    catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
    
    
    
    }
    else if(toDate.getDate()!= null  && fromDate.getDate()!= null && !user.equals("") ){
    
      try{
            
              SimpleDateFormat dateFormat=new SimpleDateFormat("yyy-MM-dd");
                String startDate=dateFormat.format(fromDate.getDate());
                String endDate=dateFormat.format(toDate.getDate());
              
             
               //Total Sales
     //  String sql = "select * from sale_history where 'date' between '"+start+"' and '"+end+"' ";
      stm=con.createStatement(); 
     String sql = "select sum(AmountPaid) AS TotalAmount from sale_history "
             + "where date between ('"+startDate+"' and '"+endDate+"') "
             + "and user='"+user+"' ";
          rs=stm.executeQuery(sql);
         rs.next();
         //double amount=0; 
          
             double num = rs.getDouble("TotalAmount");
            totalSales.setText(String.valueOf(df.format(num)));
            ///////////////////////////////////////////////////////
            
        String sql3="Select * from sale_history "
        + " WHERE  date between ('"+startDate+"' and '"+endDate+"') "
             + "and user='"+user+"' ";

        try {
            ps=con.prepareStatement(sql3);
            rs=ps.executeQuery();
        while(rs.next()){
     
             profit += Double.parseDouble(rs.getString("profit")); 
            netSales.setText(String.valueOf(df.format(profit)));
        }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }
       
        
//               //Query for number of transactions
          stm=con.createStatement();
     String sql1="Select  count(sales_number)  AS TotalTransaction FROM sale_history "
                +" WHERE  date between ('"+startDate+"' and '"+endDate+"') "
             + "and user='"+user+"' ";
        rs=stm.executeQuery(sql1);
         rs.next();
            int number = rs.getInt("TotalTransaction");
              txtTransaction.setText(String.valueOf(number));
              
              ////////////////////////////////////////////////////////////
              
                  String sql2="Select * from sale_history "
        + " WHERE  date between ('"+startDate+"' and '"+endDate+"') "
             + "and user='"+user+"' ";

        try {
            ps=con.prepareStatement(sql2);
            rs=ps.executeQuery();
            jTable7.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }   
               
       
         
    }
    catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
    
    }
    
    else{
                 String sql2="Select * from sale_history ";

        try {
            ps=con.prepareStatement(sql2);
            rs=ps.executeQuery();
            jTable7.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        } 
    }
    }//GEN-LAST:event_jButton55ActionPerformed

    private void jLabelHomeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelHomeMousePressed
        jPanelAddItem.hide();
        jPanelSell.hide();
 
        jPanelReport.hide();
         Color bgColor = Color.decode("#fed8b1");
        Color bgColor1 = Color.decode("#003333");

        jLabelItem.setBackground(bgColor1);
        jLabelItem.setForeground(Color.white);

     

        jLabelSales.setBackground(bgColor1);
        jLabelSales.setForeground(Color.white);

        jLabel1Report.setBackground(bgColor1);
        jLabel1Report.setForeground(Color.white);


        jLabelHome.setBackground(bgColor);
        jLabelHome.setForeground(Color.white);
        Font f = new Font("Times New Roman", Font.BOLD, 20);
        jLabelHome.setFont(f);
        jLabelHome.setForeground(Color.black);
    }//GEN-LAST:event_jLabelHomeMousePressed

    private void jLabelItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelItemMousePressed
        // 
      
        jPanelSell.hide();

        jPanelReport.hide();
        jPanelHome.hide();
        
        Color bgColor = Color.decode("#fed8b1");
        Color bgColor1 = Color.decode("#003333");

        jLabelHome.setBackground(bgColor1);
        jLabelHome.setForeground(Color.white);

        jLabelSales.setBackground(bgColor1);
        jLabelSales.setForeground(Color.white);

        jLabel1Report.setBackground(bgColor1);
        jLabel1Report.setForeground(Color.white);


        jLabelItem.setBackground(bgColor);
        jLabelItem.setForeground(Color.black);
        Font f = new Font("Times New Roman", Font.BOLD, 20);
        jLabelItem.setFont(f);
        jLabelItem.setForeground(Color.black);
        
        
    }//GEN-LAST:event_jLabelItemMousePressed

    private void jLabel1ReportMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1ReportMousePressed
        jPanelAddItem.hide();

        jPanelSell.hide();
        jPanelHome.hide();
        
         
        Color bgColor = Color.decode("#fed8b1");
        Color bgColor1 = Color.decode("#003333");

        jLabelHome.setBackground(bgColor1);
        jLabelHome.setForeground(Color.white);

        jLabelItem.setBackground(bgColor1);
        jLabelItem.setForeground(Color.white);
        
        jLabelSales.setBackground(bgColor1);
        jLabelSales.setForeground(Color.white);

        jLabel1Report.setBackground(bgColor1);
        jLabel1Report.setForeground(Color.white);

     
        jLabel1Report.setBackground(bgColor);
        jLabel1Report.setForeground(Color.black);
        Font f = new Font("Times New Roman", Font.BOLD, 20);
        jLabel1Report.setFont(f);
        jLabel1Report.setForeground(Color.black);
    }//GEN-LAST:event_jLabel1ReportMousePressed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
       
        if(textItemName.getText().equals("")  || textItemName.getText().equals(" ") ) 
           {
               JOptionPane.showMessageDialog(null, "Please Enter item Name","",2);
           }else{ 
   int pos = JOptionPane.showConfirmDialog(null, "Are you sure you want to Save record?","Save Record",JOptionPane.YES_NO_OPTION);
       if(txtBoxes.getText().equals("0")&& txtPerBox.getText().equals("0")
                    && textBuyingPrice.getText().equals("0.0")
                    && txtPercentage.getText().equals("0")){
            if(pos==0){  
            
                 try{

                            //Verifying Qty
                          Integer.parseInt(textQuantity.getText().trim());

                       //Verifying  Price
                        Double.parseDouble(textBuyingPrice.getText().trim());
                        Double.parseDouble(txtBuyingPerUnit.getText().trim());


                        //Calculating Expiry Days left
                          Calendar cal1 = new  GregorianCalendar();
                        Calendar cal2 = new  GregorianCalendar();

                           SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
                           Date d1 = new Date();
                           Date d2 = jDateChooserExperyDate.getDate();

                         String s2=sdf.format(jDateChooserExperyDate.getDate());
                         String s1=sdf.format(d1);

                         Date date = sdf.parse(s1);
                         cal1.setTime(date);

                           date = sdf.parse(s2);
                         cal2.setTime(date);

                  int diff = (int) ((d2.getTime()-d1.getTime())/(1000*60*60*24));


        ps=con.prepareStatement("INSERT INTO stock "
         + "(receiving_date,item_number,item_name,"
                + "description,expery_date,box,per_box,quantity,additional_qty,total_qty,total_buying_price,buying_price_per_unit,"
                + "total_selling_price,selling_price_per_unit,amt_to_be_paid,"
                + "amt_paid,amt_left,supplier,paid_by,payment_date,status,Expirydaysleft)"
                            + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,'Available for use',?)");

                        SimpleDateFormat dateFormat=new SimpleDateFormat("yyy-MM-dd");
                        String dateReceived=dateFormat.format(jDateChooserReceiveDate.getDate());
                        ps.setString(1,dateReceived);
                        ps.setString(2, textItemNumber.getText().trim().toLowerCase());
                        ps.setString(3, textItemName.getText().trim().toLowerCase());
                        ps.setString(4, textDescription.getText().trim().toLowerCase());
                        String exrperi=dateFormat.format(jDateChooserExperyDate.getDate());
                        ps.setString(5,exrperi);
                        ps.setString(6, txtBoxes.getText().trim());
                        ps.setString(7, txtPerBox.getText().trim());
                        ps.setString(8, textQuantity.getText().trim());
                        ps.setString(9, textAdditionalQuantity.getText().trim());
                         ps.setString(10, txtTotalQty.getText().trim());
                        ps.setString(11, textBuyingPrice.getText().trim());
                        ps.setString(12, txtBuyingPerUnit.getText().trim());
                        ps.setString(13, textTotalSellingPrice.getText().trim());
                        ps.setString(14, txtSellingPerUnit.getText().trim());
                        ps.setString(15, txtamtTobePaid.getText().trim());
                        ps.setString(16, txtAmtPaid.getText().trim());
                        ps.setString(17, txtAmtLeft.getText().trim());
                        ps.setString(18, jComboBoxSupplier.getSelectedItem().toString());
                         ps.setString(19, jComboBoxPaidBy.getSelectedItem().toString());
                        String paymentDate=dateFormat.format(jDateChooserPayment.getDate());
                        ps.setString(20,paymentDate);
                        ps.setInt(21, diff);
                        ps.execute();

                        JOptionPane.showMessageDialog(null,"Item is added  successfully");

                        //Deleting from Receiving Table
        //                String sql = "delete from item where receiving_number='" + textReceiving.getText().trim() + "' ";
        //                        ps = con.prepareStatement(sql);
        //                        ps.execute();
                                showallitem();
                                totalItems();
                                showProductinSelling();
                              //  jComboBoxItemName.removeAllItems();
                              //  ItenName();
                              //  JOptionPane.showMessageDialog(null, "Item has been deleted Successfully", "Success Operation", 1);
                                 clear();
                        }
                    catch(HeadlessException | NumberFormatException | SQLException | ParseException e){
                        JOptionPane.showMessageDialog(null,e.getMessage());
                             clear();

                    }
            }
            
            
            }else{
        
            Savecalculatoin();
            UIManager.put("OptionPane.messageFont", new Font("Times New Roman",Font.PLAIN, 20));
                    UIManager.put("OptionPane.buttonFont", new Font("Times New Roman",Font.BOLD, 24)); 
                 int p = JOptionPane.showConfirmDialog(null, "Are You Sure from this Information?\n"
                                                            +"===================================\n"
                         +"Item Name : "+textItemName.getText().trim()+"\n"+"Total Qty : "+txtTotalQty.getText().trim()+"\n"+"Buying Price Per Unit : "+txtBuyingPerUnit.getText().trim()+
                "\n"+"Tota selling Price : "+textTotalSellingPrice.getText().trim()+"\n"+"Selling Price Per Unit : "+txtSellingPerUnit.getText().trim()+"\n"+
                            "Amount to Paid : "+txtamtTobePaid.getText().trim()+"\n"+"Amount left : "+txtAmtLeft.getText().trim()+"\n"
                +"\n\n Note :You can updated later\n","Save Record",JOptionPane.YES_NO_OPTION);
            if(p==0){
          
               
          
                    try{

                            //Verifying Qty
                          Integer.parseInt(textQuantity.getText().trim());

                       //Verifying  Price
                        Double.parseDouble(textBuyingPrice.getText().trim());
                        Double.parseDouble(txtBuyingPerUnit.getText().trim());


                        //Calculating Expiry Days left
                          Calendar cal1 = new  GregorianCalendar();
                        Calendar cal2 = new  GregorianCalendar();

                           SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
                           Date d1 = new Date();
                           Date d2 = jDateChooserExperyDate.getDate();

                         String s2=sdf.format(jDateChooserExperyDate.getDate());
                         String s1=sdf.format(d1);

                         Date date = sdf.parse(s1);
                         cal1.setTime(date);

                           date = sdf.parse(s2);
                         cal2.setTime(date);

                  int diff = (int) ((d2.getTime()-d1.getTime())/(1000*60*60*24));


        ps=con.prepareStatement("INSERT INTO stock "
         + "(receiving_date,item_number,item_name,"
                + "description,expery_date,box,per_box,quantity,additional_qty,total_qty,total_buying_price,buying_price_per_unit,"
                + "total_selling_price,selling_price_per_unit,amt_to_be_paid,"
                + "amt_paid,amt_left,supplier,paid_by,payment_date,status,Expirydaysleft)"
                            + " values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,'Available for use',?)");

                        SimpleDateFormat dateFormat=new SimpleDateFormat("yyy-MM-dd");
                        String dateReceived=dateFormat.format(jDateChooserReceiveDate.getDate());
                        ps.setString(1,dateReceived);
                        ps.setString(2, textItemNumber.getText().trim().toLowerCase());
                        ps.setString(3, textItemName.getText().trim().toLowerCase());
                        ps.setString(4, textDescription.getText().trim().toLowerCase());
                        String exrperi=dateFormat.format(jDateChooserExperyDate.getDate());
                        ps.setString(5,exrperi);
                        ps.setString(6, txtBoxes.getText().trim());
                        ps.setString(7, txtPerBox.getText().trim());
                        ps.setString(8, textQuantity.getText().trim());
                        ps.setString(9, textAdditionalQuantity.getText().trim());
                         ps.setString(10, txtTotalQty.getText().trim());
                        ps.setString(11, textBuyingPrice.getText().trim());
                        ps.setString(12, txtBuyingPerUnit.getText().trim());
                        ps.setString(13, textTotalSellingPrice.getText().trim());
                        ps.setString(14, txtSellingPerUnit.getText().trim());
                        ps.setString(15, txtamtTobePaid.getText().trim());
                        ps.setString(16, txtAmtPaid.getText().trim());
                        ps.setString(17, txtAmtLeft.getText().trim());
                        ps.setString(18, jComboBoxSupplier.getSelectedItem().toString());
                         ps.setString(19, jComboBoxPaidBy.getSelectedItem().toString());
                        String paymentDate=dateFormat.format(jDateChooserPayment.getDate());
                        ps.setString(20,paymentDate);
                        ps.setInt(21, diff);
                        ps.execute();

                        JOptionPane.showMessageDialog(null,"Item is added  successfully");

                        //Deleting from Receiving Table
        //                String sql = "delete from item where receiving_number='" + textReceiving.getText().trim() + "' ";
        //                        ps = con.prepareStatement(sql);
        //                        ps.execute();
                                showallitem();
                                totalItems();
                                showProductinSelling();
                              //  jComboBoxItemName.removeAllItems();
                              //  ItenName();
                              //  JOptionPane.showMessageDialog(null, "Item has been deleted Successfully", "Success Operation", 1);
                                 clear();

                    }
                    catch(HeadlessException | NumberFormatException | SQLException | ParseException e){
                        JOptionPane.showMessageDialog(null,e.getMessage());
                             clear();

                    }
           
            
         }
       }
           
           
        }
        

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
clearUpdate();       
        int index;
        
        TableModel model=jTable1.getModel();

        int selectedRow = jTable1.getSelectedRow();
        index =Integer.parseInt( model.getValueAt(selectedRow, 0).toString());

        String sql = "select * from stock where receiving_number='"+index+"' " ;
        try{
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            if(rs.next()){
                String id = rs.getString("receiving_number");
                textReceiving.setText(id);

                Date dob = rs.getDate("receiving_date");
                jDateChooserReceiveDate.setDate(dob);
                
                String firstName = rs.getString("item_number");
                textItemNumber.setText(firstName);

                String hometown = rs.getString("item_name");
                textItemName.setText(hometown);

                String residence = rs.getString("description");
                textDescription.setText(residence);

                Date ex = rs.getDate("expery_date");
                jDateChooserExperyDate.setDate(ex);
                
                String box = rs.getString("box");
              //  txtBoxes.setText(box);

                String per = rs.getString("per_box");
               // txtPerBox.setText(per);

                String quantity = rs.getString("quantity");
               // textQuantity.setText(quantity);
                
                String additional_qty = rs.getString("additional_qty");
              // textAdditionalQuantity.setText(additional_qty);
                
                 String total_qty = rs.getString("total_qty");
               txtTotalQty.setText(total_qty);

                String total_buying_price = rs.getString("total_buying_price");
                textBuyingPrice.setText(total_buying_price);
                
                String buying_price_per_unit = rs.getString("buying_price_per_unit");
                txtBuyingPerUnit.setText(buying_price_per_unit);

                String total_selling_price = rs.getString("total_selling_price");
                textTotalSellingPrice.setText(total_selling_price);
                
                String selling_price_per_unit = rs.getString("selling_price_per_unit");
                txtSellingPerUnit.setText(selling_price_per_unit);

                String className = rs.getString("amt_to_be_paid");
                txtamtTobePaid.setText(className);
                
                String amt_paid = rs.getString("amt_paid");
                txtAmtPaid.setText(amt_paid);

                String amt_left = rs.getString("amt_left");
                txtAmtLeft.setText(amt_left);

                String supplier = rs.getString("supplier");
                jComboBoxSupplier.setSelectedItem(supplier);
                
                 String paid_by = rs.getString("paid_by");
                jComboBoxPaidBy.setSelectedItem(paid_by);
                
                
                Date payment_date = rs.getDate("payment_date");
                jDateChooserPayment.setDate(payment_date);
                
                txtPercentage.setText("0");
                 btnSave.setEnabled(false);
                 
                btnUpdate.setEnabled(true);
                btnDelete.setEnabled(true);
                btnPrint.setEnabled(true);
                 txtPercentage.setEditable(true);
                textReceiving.show();
                
                    }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void textSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSearchKeyReleased
               String st=textSearch.getText().trim().toLowerCase();
        String sql="Select  receiving_number,receiving_date,item_number,item_name,description,total_qty,selling_price_per_unit,supplier from stock "
                + "where receiving_number like '"+st+"%' OR item_number like '"+st+"%' OR item_name like '"+st+"%' "
                + "OR description like '"+st+"%'  ";
        btnSave.setEnabled(false);

        try {
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }
    }//GEN-LAST:event_textSearchKeyReleased

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        showallitem();
        clear();
        Date date = new Date();
         jDateChooserReceiveDate.setDate(date);
         jDateChooserExperyDate.setDate(date);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
try{ 
       textReceiving.show();
    String sql1="SELECT * FROM stock WHERE receiving_number='"+textReceiving.getText()+"'";
                ps=con.prepareStatement(sql1);
                rs=ps.executeQuery();
                if(rs.next()){
                    int DbTotalQty = rs.getInt("total_qty");
                          
          UpdateCalulation();
                 UIManager.put("OptionPane.messageFont", new Font("Times New Roman",Font.PLAIN, 20));
                    UIManager.put("OptionPane.buttonFont", new Font("Times New Roman",Font.BOLD, 24));   
            int p = JOptionPane.showConfirmDialog(null, "Are You Sure from this Information\n"
           + "Item Name : "+textItemName.getText().trim()+"\n"+"Old Qty : "+DbTotalQty+"\n"+
                   "Newm Qty : "+txtTotalQty.getText().trim()+"\n"+"Buying Price Per Unit : "+txtBuyingPerUnit.getText().trim()+
           "\n"+"Tota selling Price : "+textTotalSellingPrice.getText().trim()+"\n"+"Selling Price Per Unit : "+txtSellingPerUnit.getText().trim()+"\n"+
                       "Amount to Paid : "+txtamtTobePaid.getText().trim()+"\n"+"Amount left : "+txtAmtLeft.getText().trim()+"\n"
           +"\n\n Note :You can updated later\n","Update Record",JOptionPane.YES_NO_OPTION);
   if(p==0){
           
        try{
    
            

            
//Updating Records            
                String sql= "update stock set "
                 + "receiving_date=?,item_number=?,item_name=?,description=?,expery_date=?,"
                        + "box=?,per_box=?,"
                 + "quantity=?,additional_qty=?,total_qty=?,total_buying_price=?,buying_price_per_unit=?,total_selling_price=?,"
                        + "selling_price_per_unit=?,amt_to_be_paid=?"
                        + ",amt_paid=?,amt_left=?,supplier=?"
                        + ",paid_by=?,payment_date=?"
                 + "  where receiving_number='"+textReceiving.getText().trim()+"' ";

                 ps=con.prepareStatement(sql);
                 SimpleDateFormat dateFormat=new SimpleDateFormat("yyy-MM-dd");
                String receive=dateFormat.format(jDateChooserReceiveDate.getDate());
                ps.setString(1,receive);
                ps.setString(2, textItemNumber.getText().trim().toLowerCase());
                 ps.setString(3, textItemName.getText().trim().toLowerCase());
                ps.setString(4, textDescription.getText().trim().toLowerCase());
                String expery=dateFormat.format(jDateChooserExperyDate.getDate());
                ps.setString(5,expery); 
                 ps.setString(6, txtBoxes.getText().trim());
                ps.setString(7, txtPerBox.getText().trim());
                ps.setString(8, textQuantity.getText().trim());
                ps.setString(9, textAdditionalQuantity.getText().trim());
                ps.setString(10, txtTotalQty.getText().trim());
                ps.setString(11, textBuyingPrice.getText().trim());
                ps.setString(12, txtBuyingPerUnit.getText().trim());
                ps.setString(13, textTotalSellingPrice.getText().trim());
                ps.setString(14, txtSellingPerUnit.getText().trim());
                 ps.setString(15, txtamtTobePaid.getText().trim());
                ps.setString(16, txtAmtPaid.getText().trim());
                ps.setString(17, txtAmtLeft.getText().trim());
                ps.setString(18, jComboBoxSupplier.getSelectedItem().toString());
                 ps.setString(19, jComboBoxPaidBy.getSelectedItem().toString());
                String paymentDate=dateFormat.format(jDateChooserPayment.getDate());
                ps.setString(20,paymentDate);
                  ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record Updated");
                showallitem();
                showProductinSelling();
                clear();

            
            
      
                 
                 }catch(HeadlessException | SQLException e){
                    JOptionPane.showMessageDialog(null, e);
                }
        
        }
   
}
} catch(HeadlessException | SQLException e){
                    JOptionPane.showMessageDialog(null, e);
                }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void textQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textQuantityActionPerformed

    private void textQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textQuantityKeyPressed
   
    }//GEN-LAST:event_textQuantityKeyPressed

    private void textQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textQuantityKeyTyped
        if(!Character.isAlphabetic(evt.getKeyChar())&& !Character.isSpaceChar(evt.getKeyChar())){

        }else if(textQuantity.getText().trim().length()==0 && Character.isLowerCase(evt.getKeyChar())) {
            evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        }
    }//GEN-LAST:event_textQuantityKeyTyped

    private void textBuyingPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBuyingPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textBuyingPriceActionPerformed

    private void textBuyingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuyingPriceKeyPressed
     //Preventing user from entering a String
        String number =textBuyingPrice.getText().trim();
        int l=number.length();
        if((evt.getKeyChar() >= '0' && evt.getKeyChar()<='9' || evt.getKeyChar()== KeyEvent.VK_BACK_SPACE || evt.getKeyChar()== KeyEvent.VK_PERIOD)){
            textBuyingPrice.setEditable(true);
        }else{
            //  txtContact.setEditable(false);

            JOptionPane.showMessageDialog(null, "*Please Enter only digits(0-9)");
            textBuyingPrice.setText("");
        }
    }//GEN-LAST:event_textBuyingPriceKeyPressed

    private void textBuyingPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuyingPriceKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textBuyingPriceKeyTyped

    private void txtBuyingPerUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuyingPerUnitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuyingPerUnitActionPerformed

    private void txtBuyingPerUnitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuyingPerUnitKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuyingPerUnitKeyPressed

    private void txtBuyingPerUnitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuyingPerUnitKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuyingPerUnitKeyTyped

    private void jLabelItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelItemMouseReleased
        textReceiving.hide();
    }//GEN-LAST:event_jLabelItemMouseReleased

    private void textBuyingPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuyingPriceKeyReleased
if(textBuyingPrice.getText().equals("")){
    txtPercentage.setEditable(false);
}else{
    txtPercentage.setEditable(true);
}
    }//GEN-LAST:event_textBuyingPriceKeyReleased

    private void textQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textQuantityKeyReleased
    
    }//GEN-LAST:event_textQuantityKeyReleased

    private void jPanelSellMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelSellMouseEntered
      
    }//GEN-LAST:event_jPanelSellMouseEntered

    private void txtPreviousQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPreviousQtyKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPreviousQtyKeyTyped

    private void textStudentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textStudentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textStudentIDActionPerformed

    private void txtReceiveNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReceiveNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReceiveNumActionPerformed

    private void txtReceiveNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReceiveNumKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReceiveNumKeyTyped

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
      
       /// DecimalFormat df = new  DecimalFormat("#.##");
          double profitDecimal=Double.parseDouble(txtProfit.getText().trim());
        try {
 ps=con.prepareStatement("INSERT INTO temp "
  + "(sale_number,receiving_number,item_number,item_name,quantity,previous_qty,selling_price,total_price,profit,date,user)"
  + " values(?,?,?,?,?,?,?,?,?,?,?)");
  java.sql.Timestamp date = new  java.sql.Timestamp(new java.util.Date().getTime());
                ps.setString(1, txtSalesNum.getText().trim());
                ps.setString(2, txtReceiveNum.getText().trim());
                ps.setString(3, txtItemNum.getText().trim());
                ps.setString(4, txtItemName.getText().trim());
                ps.setString(5, txtBuyingQty.getText().trim());
                ps.setString(6, txtPreviousQty.getText().trim());
                ps.setString(7, txtSellingPRice.getText().trim());
                ps.setString(8, txtAmount.getText().trim());
                ps.setString(9, String.valueOf(profitDecimal));
                ps.setString(10, date.toString());
                ps.setString(11, username1.getText().trim());
                ps.execute();
            
                String itemNum=txtItemNum.getText().trim();
                String itemName=txtItemName.getText().trim();
                String qty=txtBuyingQty.getText().trim();
                String price=txtSellingPRice.getText().trim();
                String totalAmt=jblAmountDue.getText().trim();
        
              double amtPaid=Double.parseDouble(totalAmt);
              double buyQty=Double.parseDouble(qty);
              double sp=Double.parseDouble(price);
              double total=buyQty*sp;
              
              

        try{

            //Total Sales
            String sql = "select * from temp ";
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            double amount=0;
            double profit=0;
            while(rs.next()){

                amount += Double.parseDouble(rs.getString("total_price"));
                jblAmountDue.setText(String.valueOf(df.format(amount)));
                
                 profit += Double.parseDouble(rs.getString("profit"));
                jLabel112.setText(String.valueOf(df.format(profit)));
            }

        }
        catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
        }
              showallTemptable();
              txtSearch.setText("");
              txtBuyingQty.setText("");
             
            btnAdd.setEnabled(false);
            jComboBox1.setEnabled(true);
          //  btnProceed.setEnabled(true);
               jTextArea1.append(itemNum+"   "+itemName+"\t"+price+"\t"+qty+"\t"+total+"\n");
  
 
       
                    
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        } catch (SQLException ex) {
            Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void textStudentID5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textStudentID5KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textStudentID5KeyTyped

    private void jLabelHomeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelHomeMouseReleased

    }//GEN-LAST:event_jLabelHomeMouseReleased

    private void jPanelAddItemMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jPanelAddItemMouseWheelMoved
    
    }//GEN-LAST:event_jPanelAddItemMouseWheelMoved

    private void jPanelAddItemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelAddItemMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanelAddItemMouseEntered

    private void jPanelHomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelHomeMouseEntered
      
    }//GEN-LAST:event_jPanelHomeMouseEntered

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
      // showDate();
    }//GEN-LAST:event_formMouseEntered

    private void btnProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedActionPerformed
        TableModel model=jTable2.getModel(); 
      
       try {
           
             for(int count=0; count<model.getRowCount(); count++ ){
            
           int id =Integer.parseInt( model.getValueAt(count, 1).toString());
            //String id =(String) jTable2.getModel().getValueAt(count, 2);
           int soldQty =Integer.parseInt( model.getValueAt(count, 4).toString());
           
             
             String sql = "select * from stock where receiving_number="+id+" ";
           ps=con.prepareStatement(sql);
           rs=ps.executeQuery();
           if(rs.next()){
          String qtyStock = rs.getString("total_qty"); 
          int qtyStockNum=Integer.parseInt(qtyStock);
          
          
          //int finalSoldQty = Integer.parseInt(soldQty);
          
          int newStock= qtyStockNum-soldQty;
          
          String SqlUpdate="update stock set total_qty="+newStock+" where receiving_number="+id+" ";
          ps=con.prepareStatement(SqlUpdate);
          ps.execute();
         
           }
             }
                    
            //inserting into sales table from temp table
            ps=con.prepareStatement("INSERT INTO sales "
            + "(sale_number,receiving_number,item_number,item_name,quantity,previous_qty,selling_price,total_price,profit,date,user)"
     + " select sale_number,receiving_number,item_number,item_name,quantity,previous_qty,selling_price,total_price,profit,date,user"
            + " from temp");
            ps.execute();
            
            int postion = jComboBox1.getSelectedIndex();
            ///Total Profit
           if (postion==2) {
                double discount=Double.parseDouble(txtDiscountAmt.getText());
                double profit=Double.parseDouble(jLabel112.getText());
                double ProfitAFterDiscount = profit - discount;
                
               
                           //Inserting to sales history
           java.sql.Timestamp date = new  java.sql.Timestamp(new java.util.Date().getTime());
           ps=con.prepareStatement("INSERT INTO sale_history "
                               + "(sales_number,date,due_amount,discount_amount,AmountPaid,profit,user)"
                                 + " values(?,?,?,?,?,?,?)");

                ps.setString(1, txtSalesNum.getText().trim());
                ps.setTimestamp(2, date);
                ps.setString(3, jblAmountDue.getText());
                ps.setString(4, txtDiscountAmt.getText());
                ps.setString(5, lblAMountPaid.getText());
                ps.setString(6, String.valueOf(df.format(ProfitAFterDiscount)));
                ps.setString(7, username1.getText());
                ps.execute();
               
           } else if(postion==3) {
               
                double discountPercent=Double.parseDouble(txtDiscountPercentage.getText().trim());
                double TotalAfterMultiplty = discountPercent/100;
                double profit=Double.parseDouble(jLabel112.getText());
                double ProfitAFterDiscount = profit - TotalAfterMultiplty;
                           //Inserting to sales history Profit GHS
           java.sql.Timestamp date = new  java.sql.Timestamp(new java.util.Date().getTime());
           ps=con.prepareStatement("INSERT INTO sale_history "
                               + "(sales_number,date,due_amount,discount_amount,AmountPaid,profit,user)"
                                 + " values(?,?,?,?,?,?,?)");

                ps.setString(1, txtSalesNum.getText().trim());
                ps.setTimestamp(2, date);
                ps.setString(3, jblAmountDue.getText());
                ps.setString(4, txtDiscountAmt.getText());
                ps.setString(5, lblAMountPaid.getText());
                ps.setString(6, String.valueOf(df.format(ProfitAFterDiscount)));
                ps.setString(7, username1.getText());
                ps.execute();
           }else{
               double discount=0.0;
           
                          //Inserting to sales history
           java.sql.Timestamp date = new  java.sql.Timestamp(new java.util.Date().getTime());
           ps=con.prepareStatement("INSERT INTO sale_history "
            + "(sales_number,date,due_amount,discount_amount,AmountPaid,profit,user)"
              + " values(?,?,?,?,?,?,?)");

                ps.setString(1, txtSalesNum.getText().trim());
                ps.setTimestamp(2, date);
                ps.setString(3, jblAmountDue.getText());
                ps.setString(4, txtDiscountAmt.getText());
                ps.setString(5, lblAMountPaid.getText());
                ps.setString(6,  String.valueOf(discount));
                ps.setString(7, username1.getText());
                ps.execute();
            
           }
           
           
         
       
              
       
            
              //Deleting from Temp table
                String sql3="delete  from temp ";
                ps =con.prepareStatement(sql3);
                ps.execute();
//                txtPrint.setEnabled(true);
                btnProceed.setEnabled(false);
                jButton16.setEnabled(false);
                
              
             
                printReceipt();
                showStock();
                JOptionPane.showMessageDialog(null,"Done");
        } catch (HeadlessException | NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null,e.getMessage());
       }
            
    }//GEN-LAST:event_btnProceedActionPerformed

    private void jButton16MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton16MousePressed

    }//GEN-LAST:event_jButton16MousePressed

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
   
    }//GEN-LAST:event_btnSaveMouseClicked

    private void txtItemNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemNameKeyTyped

    private void txtDiscountPercentageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountPercentageKeyPressed
              String number =txtDiscountPercentage.getText().trim();
        int l=number.length();
        if((evt.getKeyChar() >= '0' && evt.getKeyChar()<='9')|| evt.getKeyChar()== KeyEvent.VK_BACK_SPACE || evt.getKeyChar()== KeyEvent.VK_PERIOD){
            txtDiscountPercentage.setEditable(true);
        }else{
           // textStudentID33.setEditable(false);
             //textStudentID11.setText("0");
             JOptionPane.showMessageDialog(null, "*Please Enter only digits(0-9)");
              //textStudentID11.setText("");
               txtDiscountPercentage.setText("0.0");
        }
    }//GEN-LAST:event_txtDiscountPercentageKeyPressed

    private void txtDiscountPercentageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountPercentageKeyReleased
     //   jButton14.setEnabled(true);
         try{
              DecimalFormat df = new  DecimalFormat("#.##");
        double discountPercent=Double.parseDouble(txtDiscountPercentage.getText().trim());
         double TotalAfterMultiplty = discountPercent/100;
         
         double dueAmount=Double.parseDouble(jblAmountDue.getText().trim());
         double discountAmount = TotalAfterMultiplty*dueAmount;
    
       
             //double AmountToBePaid=Double.parseDouble(textStudentID7.getText());
              
              double AmountToBePaid=dueAmount-discountAmount;
              lblAMountPaid.setText(String.valueOf(df.format(AmountToBePaid)));
              btnProceed.setEnabled(true);
              // btnAdd.setEnabled(true);
              
             
            
         }catch(NumberFormatException e){
       //  JOptionPane.showMessageDialog(null, e.getMessage());
         }
      
      
    }//GEN-LAST:event_txtDiscountPercentageKeyReleased

    private void txtDiscountPercentageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountPercentageKeyTyped
      
    }//GEN-LAST:event_txtDiscountPercentageKeyTyped

    private void txtDiscountAmtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountAmtKeyPressed
          String number =txtDiscountAmt.getText().trim();
        int l=number.length();
        if((evt.getKeyChar() >= '0' && evt.getKeyChar()<='9')|| evt.getKeyChar()== KeyEvent.VK_BACK_SPACE || evt.getKeyChar()== KeyEvent.VK_PERIOD){
            txtDiscountAmt.setEditable(true);
        }else{
           // textStudentID33.setEditable(false);
             //textStudentID11.setText("0");
             JOptionPane.showMessageDialog(null, "*Please Enter only digits(0-9)");
              //textStudentID11.setText("");
               txtDiscountAmt.setText("0.0");
        }
    }//GEN-LAST:event_txtDiscountAmtKeyPressed

    private void txtDiscountAmtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountAmtKeyReleased
     try{
          DecimalFormat df = new  DecimalFormat("#.##");
        double discountAmt=Double.parseDouble(txtDiscountAmt.getText().trim());
         
         double dueAmount=Double.parseDouble(jblAmountDue.getText().trim());
    
       
             //double AmountToBePaid=Double.parseDouble(textStudentID7.getText());
              
              double AmountToBePaid=dueAmount-discountAmt;
              lblAMountPaid.setText(String.valueOf(df.format(AmountToBePaid)));
              btnProceed.setEnabled(true);
              // btnAdd.setEnabled(true);
              
             
            
         }catch(NumberFormatException e){
       //  JOptionPane.showMessageDialog(null, e.getMessage());
         }
    }//GEN-LAST:event_txtDiscountAmtKeyReleased

    private void txtDiscountAmtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountAmtKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiscountAmtKeyTyped

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
     int index = jComboBox1.getSelectedIndex();
     if(index==1){
         txtDiscountPercentage.setEditable(false);
          txtDiscountAmt.setEditable(false);
          btnProceed.setEnabled(true);
          String get=jblAmountDue.getText();
          lblAMountPaid.setText(get);
          
         
     }else if(index==2){
         txtDiscountPercentage.setEditable(false);
          txtDiscountAmt.setEditable(true);
          btnAdd.setEnabled(false);
     }else if(index==3){
         txtDiscountPercentage.setEditable(true);
          txtDiscountAmt.setEditable(false);
          btnAdd.setEnabled(false);
         
     }else{
      txtDiscountPercentage.setEditable(false);
          txtDiscountAmt.setEditable(false);
          btnAdd.setEnabled(false);
     }
       
        
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
          String user=username1.getText();
          try{
        ps=con.prepareStatement("INSERT INTO Audit (Username,action,action_time) values ('"+user+"','Logout',?)");
                  //Creating instance for Date and Time
                  java.sql.Timestamp date = new  java.sql.Timestamp(new java.util.Date().getTime());
                  ps.setTimestamp(1, date);
                  
                 ps.execute();
                 LogIn login = new LogIn();
                 login.show();
                 this.dispose();
          }catch(SQLException e){
               JOptionPane.showMessageDialog(null, e.getMessage());
          }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
CheckLogin au = new CheckLogin();
au.show();
//this.hide();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jComboBoxUsersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxUsersItemStateChanged
DecimalFormat df = new  DecimalFormat("#.##");
String user = jComboBoxUsers.getSelectedItem().toString();
      if(user.equals(" ")){
      totalSales.setText("0.0");
      txtTransaction.setText("0");
      netSales.setText("0.0");
         String sql2="Select * from sale_history ";

        try {
            ps=con.prepareStatement(sql2);
            rs=ps.executeQuery();
            jTable7.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }
      }else{
      
    try{
  
          
               //Total Sales
       String sql = "select * from sale_history where user='"+user+"' ";
       ps=con.prepareStatement(sql);
       rs=ps.executeQuery();
         double amount=0; 
         double profit=0;
        while(rs.next()){
          
            amount += Double.parseDouble(rs.getString("AmountPaid")); 
            totalSales.setText(String.valueOf(df.format(amount)));
            
            profit += Double.parseDouble(rs.getString("profit")); 
            netSales.setText(String.valueOf(df.format(profit)));
        }
        
               //Query for number of transactions
          stm=con.createStatement();
             String sql1="Select  count(sales_number)  AS TotalTransaction FROM sale_history "
                +" WHERE  user = '"+user+"' ";
        rs=stm.executeQuery(sql1);
         rs.next();
            int number = rs.getInt("TotalTransaction");
              txtTransaction.setText(String.valueOf(number));
              
                  String sql2="Select  * from sale_history "
        + "where user like '"+user+"%' ";

        try {
            ps=con.prepareStatement(sql2);
            rs=ps.executeQuery();
            jTable7.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }
               
       
         
    }
    catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
    
      
      }

    }//GEN-LAST:event_jComboBoxUsersItemStateChanged

    private void txtPerBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPerBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPerBoxActionPerformed

    private void txtPerBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPerBoxKeyPressed
           //Preventing user from entering a String
        String number =txtPerBox.getText().trim();
        int l=number.length();
        if((evt.getKeyChar() >= '0' && evt.getKeyChar()<='9' || evt.getKeyChar()== KeyEvent.VK_BACK_SPACE)){
            txtPerBox.setEditable(true);
        }else{
            //  txtContact.setEditable(false);

            JOptionPane.showMessageDialog(null, "*Please Enter only digits(0-9)");
            txtPerBox.setText("");
        }
    }//GEN-LAST:event_txtPerBoxKeyPressed

    private void txtPerBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPerBoxKeyReleased
      try{
//             int box=Integer.parseInt(txtBoxes.getText());
//              
//              int perBox=Integer.parseInt(txtPerBox.getText());
//              int total=box*perBox;
//              textQuantity.setText(String.valueOf(total));
//              txtTotalQty.setText(String.valueOf(total));
         }catch(NumberFormatException e){
     //    JOptionPane.showMessageDialog(null, e.getMessage());
         }
    }//GEN-LAST:event_txtPerBoxKeyReleased

    private void txtPerBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPerBoxKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPerBoxKeyTyped

    private void txtBoxesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBoxesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBoxesActionPerformed

    private void txtBoxesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxesKeyPressed
         //Preventing user from entering a String
        String number =txtBoxes.getText().trim();
        int l=number.length();
        if((evt.getKeyChar() >= '0' && evt.getKeyChar()<='9' || evt.getKeyChar()== KeyEvent.VK_BACK_SPACE)){
            txtBoxes.setEditable(true);
        }else{
            //  txtContact.setEditable(false);

            JOptionPane.showMessageDialog(null, "*Please Enter only digits(0-9)");
            txtBoxes.setText("");
        }
    }//GEN-LAST:event_txtBoxesKeyPressed

    private void txtBoxesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxesKeyReleased
 
                       try{
//             int box=Integer.parseInt(txtBoxes.getText());
//              int perBox=Integer.parseInt(txtPerBox.getText());
//              int total=box*perBox;
//                textQuantity.setText(String.valueOf(total));
//                
//                
////               int qty=Integer.parseInt(textQuantity.getText());
////               int Additionalqty=Integer.parseInt(textAdditionalQuantity.getText());
////               
////               int finalTotal =  qty +Additionalqty;
//              
//             
//              txtTotalQty.setText(String.valueOf(total));
         }catch(NumberFormatException e){
     //    JOptionPane.showMessageDialog(null, e.getMessage());
         }
             
    }//GEN-LAST:event_txtBoxesKeyReleased

    private void txtBoxesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxesKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBoxesKeyTyped

    private void txtAmtPaidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmtPaidKeyTyped
  //Preventing user from entering a String
        String number =txtAmtPaid.getText().trim();
        int l=number.length();
        if((evt.getKeyChar() >= '0' && evt.getKeyChar()<='9' || evt.getKeyChar()== KeyEvent.VK_BACK_SPACE || evt.getKeyChar()== KeyEvent.VK_PERIOD)){
            txtAmtPaid.setEditable(true);
        }else{
            //  txtContact.setEditable(false);

            JOptionPane.showMessageDialog(null, "*Please Enter only digits(0-9)");
            txtAmtPaid.setText("");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmtPaidKeyTyped

    private void txtAmtLeftKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmtLeftKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmtLeftKeyTyped

    private void txtAmtPaidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmtPaidKeyReleased
 
        try{
//                 String amt_Paid=txtAmtPaid.getText().trim();
//                double numPaid = Double.parseDouble(amt_Paid);
//                String amt_to_be_Paid=txtamtTobePaid.getText().trim();
//                double numToBePaid = Double.parseDouble(amt_to_be_Paid);
//
//
//          
//          if(numPaid>numToBePaid){
//                JOptionPane.showMessageDialog(null,"Amount Paid should not be more than Amount to be Paid");
//          txtAmtPaid.setText("");
//          }else{
//          double AmtPaid=Double.parseDouble( txtAmtPaid.getText());
//              
//              double toBePaid=Double.parseDouble(txtamtTobePaid.getText());
//              double AmtLeft=toBePaid-AmtPaid;
//              txtAmtLeft.setText(String.valueOf(AmtLeft));
//              
//           
//          }
             
         }catch(NumberFormatException e){
       //  JOptionPane.showMessageDialog(null, e.getMessage());
         }
    }//GEN-LAST:event_txtAmtPaidKeyReleased

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
     Creditors sup = new Creditors();
   sup.setVisible(true);
  // this.hide();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
         Supplier sup = new Supplier();
   sup.setVisible(true);
 //  this.hide();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
   setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
   
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    
               passwordChange CI = new passwordChange();
                   CI.show();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
           companyInfo CI = new companyInfo();
      CI.show();
     // this.hide();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
 Profile CI = new Profile();
                   CI.show();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
    user h = new user();
        h.setVisible(true);
       // this.hide();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
     SaleHistory h = new SaleHistory();
        h.setVisible(true);
     //   this.hide();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
       qtyLeftList h = new qtyLeftList();
        h.setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
      Warning_List h = new Warning_List();
        h.setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
       expiredList h = new expiredList();
        h.setVisible(true);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jButton56ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton56ActionPerformed
         try {
          
            URL   url=this.getClass().getClassLoader().getResource("logo/Share.jpg");  
            
            HashMap param =  new HashMap();

        //    param.put("myImg", url);



InputStream jasperStream = getClass().getResourceAsStream("/report/SaleReport.jasper");
//JasperReport jr =  JasperCompileManager.compileReport(getClass().getResourceAsStream("/reports/memberReport.jrxml"));jasper
 //JasperReport jr =  JasperCompileManager.compileReport(jd);
  JasperReport jr =  (JasperReport) JRLoader.loadObject(jasperStream);
  JasperPrint jp  = JasperFillManager.fillReport(jr, param, con);
  
  JasperViewer jv = new JasperViewer(jp,false); 
  jv.setVisible(true);
    
    

    } catch ( JRException ex) {
        JOptionPane.showMessageDialog(null, ex.getMessage());
        
    }
    }//GEN-LAST:event_jButton56ActionPerformed

    private void txtBuyingPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuyingPriceKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuyingPriceKeyTyped

    private void txtItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemNameActionPerformed

    private void txtProfitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProfitKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProfitKeyTyped

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
 BackUp CI = new BackUp();
                   CI.show();
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jButton4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4MouseEntered

    private void jButton4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4MouseExited

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            totalUsers();
            totalSupplier();
            totalItems();
            showCompanyInfo();
//            jComboBoxSupplier.removeAllItems();
//             supplier();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void textTotalSellingPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTotalSellingPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textTotalSellingPriceActionPerformed

    private void textTotalSellingPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTotalSellingPriceKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_textTotalSellingPriceKeyPressed

    private void textTotalSellingPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTotalSellingPriceKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textTotalSellingPriceKeyTyped

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
      try {
          
            URL   url=this.getClass().getClassLoader().getResource("logo/Share.jpg");  
            
            HashMap param =  new HashMap();

        //    param.put("myImg", url);



InputStream jasperStream = getClass().getResourceAsStream("/report/StockReport.jasper");
//JasperReport jr =  JasperCompileManager.compileReport(getClass().getResourceAsStream("/reports/memberReport.jrxml"));jasper
 //JasperReport jr =  JasperCompileManager.compileReport(jd);
  JasperReport jr =  (JasperReport) JRLoader.loadObject(jasperStream);
  JasperPrint jp  = JasperFillManager.fillReport(jr, param, con);
  
  JasperViewer jv = new JasperViewer(jp,false); 
  jv.setVisible(true);
    
    

    } catch ( JRException ex) {
        JOptionPane.showMessageDialog(null, ex.getMessage());
        
    }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
  
    
    if(jDateChooser2.getDate()==null){
    JOptionPane.showMessageDialog(null, "Choose a date");
    }else{
          SimpleDateFormat dateFormat=new SimpleDateFormat("yyy-MM-dd");
    String receiveDate=dateFormat.format(jDateChooser2.getDate());
       // Date date=jDateChooser1.getDate();
  //  Date date = new Date();
    
        String sql="Select  receiving_number,receiving_date,item_number,item_name,total_qty,selling_price_per_unit,supplier from stock "
                + "where receiving_date like '"+receiveDate+"%' ";
  try {
      
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }
       }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jComboBoxSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSupplierActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSupplierActionPerformed

    private void txtSellingPerUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSellingPerUnitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSellingPerUnitActionPerformed

    private void txtSellingPerUnitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPerUnitKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSellingPerUnitKeyPressed

    private void txtSellingPerUnitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSellingPerUnitKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSellingPerUnitKeyTyped

    private void textAdditionalQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textAdditionalQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textAdditionalQuantityActionPerformed

    private void textAdditionalQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAdditionalQuantityKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_textAdditionalQuantityKeyPressed

    private void textAdditionalQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAdditionalQuantityKeyReleased
            try{
                
//                    
//              int Qty=Integer.parseInt(txtTotalQty.getText().trim());
//             int additionalQty=Integer.parseInt(textAdditionalQuantity.getText().trim());
//             int newQty = Qty+additionalQty;
//
//              txtTotalQty.setText(String.valueOf(newQty));
                
           

         }catch(NumberFormatException e){
     //    JOptionPane.showMessageDialog(null, e.getMessage());
         }
    }//GEN-LAST:event_textAdditionalQuantityKeyReleased

    private void textAdditionalQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAdditionalQuantityKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textAdditionalQuantityKeyTyped

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
      
     int index;
        
        TableModel model=jTable3.getModel();

        int selectedRow = jTable3.getSelectedRow();
        index =Integer.parseInt( model.getValueAt(selectedRow, 0).toString());

        String sql = "select * from stock where receiving_number='"+index+"' " ;
        try{
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            if(rs.next()){
                String id = rs.getString("receiving_number");
                textStudentID.setText(id);
                
                String id1 = rs.getString("receiving_number");
                txtReceiveNum.setText(id1);
                
                String firstName = rs.getString("item_number");
                txtItemNum.setText(firstName);

                String hometown = rs.getString("item_name");
                txtItemName.setText(hometown);

                String residence = rs.getString("description");
                textStudentID3.setText(residence);

                String age = rs.getString("total_qty");
                txtPreviousQty.setText(age);
                
                   String buying_price_per_unit = rs.getString("buying_price_per_unit");
                txtBuyingPrice.setText(buying_price_per_unit);
                
                 String profession = rs.getString("selling_price_per_unit");
                txtSellingPRice.setText(profession);

             
         
                
                       txtAvailable.setText("Available");
         txtBuyingQty.setEditable(true);
         txtBuyingQty.setText("");
         textStudentID5.setText("");
         txtAmount.setText("00.0");

                
                    }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
        }
    }//GEN-LAST:event_jTable3MouseClicked

    private void txtPercentageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPercentageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPercentageActionPerformed

    private void txtPercentageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPercentageKeyPressed
  //Preventing user from entering a String
        String number =txtPercentage.getText().trim();
        int l=number.length();
        if((evt.getKeyChar() >= '0' && evt.getKeyChar()<='9' || evt.getKeyChar()== KeyEvent.VK_BACK_SPACE)){
            txtPercentage.setEditable(true);
        }else{
            //  txtContact.setEditable(false);

            JOptionPane.showMessageDialog(null, "*Please Enter only digits(0-9)");
            txtPercentage.setText("");
        }  
    }//GEN-LAST:event_txtPercentageKeyPressed

    private void txtPercentageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPercentageKeyReleased
         try{
//              double percentage=Double.parseDouble(txtPercentage.getText());
//             
//             double Buyingpercertage = percentage/100; 
//             double buyQty=Double.parseDouble(txtTotalQty.getText());
//              
//             double buyingPrice=Double.parseDouble(textBuyingPrice.getText());
//          //    double sellingPrice=Double.parseDouble(textTotalSellingPrice.getText());
//              
//              
//              
//              //Total Selling Price
//              double sellingPricePer = buyingPrice*Buyingpercertage;
//              double FinalsellingPrice = buyingPrice+sellingPricePer;
//              ////////////////
//              
//              
//              //Buying Per Unit
//              double buyingPricePerUnit = FinalsellingPrice/buyQty;
//              
//              
//                //Selling Per Unit
//              double sellingPricePerUnit = buyingPrice/buyQty;
//              
//              //Amount To be Paid
//              double total=buyQty*buyingPrice;
//              
//              
//               //Buying Price Per Box Amount
//               double perbox=Double.parseDouble(txtPerBox.getText());
//                double BuyingPricePerBox=buyingPrice/perbox;
//             //  textBuyingPricePerBox.setText(String.valueOf(df.format(BuyingPricePerBox)));
//              
//              
//             
//                           
//              textTotalSellingPrice.setText(String.valueOf(df.format(FinalsellingPrice)));
//               txtBuyingPerUnit.setText(String.valueOf(df.format(sellingPricePerUnit)));
//                txtSellingPerUnit.setText(String.valueOf(df.format(buyingPricePerUnit)));
//               txtamtTobePaid.setText(String.valueOf(buyingPrice));
//                txtAmtLeft.setText(String.valueOf(df.format(buyingPrice)));

         }catch(NumberFormatException e){
     //    JOptionPane.showMessageDialog(null, e.getMessage());
         }
         // TODO add your handling code here:
    }//GEN-LAST:event_txtPercentageKeyReleased

    private void txtPercentageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPercentageKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPercentageKeyTyped

    private void jComboBoxPaidByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPaidByActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPaidByActionPerformed

    private void txtTotalQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalQtyActionPerformed

    private void txtTotalQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalQtyKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalQtyKeyPressed

    private void txtTotalQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalQtyKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalQtyKeyReleased

    private void txtTotalQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalQtyKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalQtyKeyTyped

    private void txtBuyingQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuyingQtyKeyTyped

    }//GEN-LAST:event_txtBuyingQtyKeyTyped

    private void txtBuyingQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuyingQtyKeyReleased

        try {

            int qty=Integer.parseInt(txtBuyingQty.getText().trim());
            int stk=Integer.parseInt(txtPreviousQty.getText().trim());
            if(txtBuyingQty.getText().equals("") || evt.getKeyChar()== KeyEvent.VK_BACK_SPACE){
                textStudentID5.setText("");
                txtAmount.setText("00.0");
                textStudentID5.setText("0");
                jblAmountDue.setText("00.0");
            }else{
                if(qty > stk){
                    btnAdd.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Quantity buying cannot more than Quantity in Stock");
                }else{
                    //   btnAdd.setEnabled(true);
                    try{
                        ///Due Payment
                        double buyQty=Double.parseDouble(txtBuyingQty.getText());
                        double sp=Double.parseDouble(txtSellingPRice.getText());

                        double currentAmt=Double.parseDouble(jblAmountDue.getText());

                        double total=buyQty*sp;
                        double totalCurrentAmt = total+currentAmt;
                        txtAmount.setText(String.valueOf(total));
                        jblAmountDue.setText(String.valueOf(total));

                        int qtyLeft=stk-qty;
                        textStudentID5.setText(String.valueOf(qtyLeft));

                        ///Profit
                        double costPrice=Double.parseDouble(txtBuyingPrice.getText());

                        double costAmt = costPrice*buyQty;
                        double profit = total - costAmt;
                        txtProfit.setText(String.valueOf(df.format(profit)));

                        btnAdd.setEnabled(true);
                        jComboBox1.setEnabled(false);

                    }catch(NumberFormatException e){
                        JOptionPane.showMessageDialog(null, e.getMessage());
                    }
                }
            }

        } catch (Exception e) {
        }

    }//GEN-LAST:event_txtBuyingQtyKeyReleased

    private void txtBuyingQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuyingQtyKeyPressed
        String number =txtBuyingQty.getText().trim();
        int l=number.length();
        if((evt.getKeyChar() >= '0' && evt.getKeyChar()<='9')|| evt.getKeyChar()== KeyEvent.VK_BACK_SPACE){
            txtBuyingQty.setEditable(true);
            //  btnAdd.setEnabled(true);
        }else{
            // textStudentID11.setEditable(false);

            JOptionPane.showMessageDialog(null, "*Please Enter only digits(0-9)");
            jblAmountDue.setText("00.0");
            //textStudentID11.setText("");
            btnAdd.setEnabled(false);
            txtBuyingQty.setText("0");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuyingQtyKeyPressed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped

    }//GEN-LAST:event_txtSearchKeyTyped

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String search=txtSearch.getText().trim().toLowerCase();
        if(!search.equals("")){

            String sql="Select  receiving_number,item_number,item_name from stock "
            + "where  item_number like '"+search+"%' OR item_name like '"+search+"%' "
            + " ";

            try {
                ps=con.prepareStatement(sql);
                rs=ps.executeQuery();
                jTable3.setModel(DbUtils.resultSetToTableModel(rs));

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());

            }

        }else{
            showProductinSelling();

        }
        //        int combo=jComboBoxItemName.getSelectedIndex();
        //        String search=txtSearch.getText().trim().toLowerCase();
        //     String sql="Select * from stock where item_name like '"+search+"%' OR receiving_number like '"+search+"%'"
        //             + " OR item_number like '"+search+"%'";
        //     //  String sql1="Select * from stock where item_name = '"+combo+"'";
        //         // String sql = "select item_name from stock";
        //        try{
            //            ps=con.prepareStatement(sql);
            //            rs=ps.executeQuery();
            //               while(rs.next()){
                //                String itemName = rs.getString("item_name");
                //
                //
                //                jComboBoxItemName.addItem(rs.getString("item_name"));
                //            }
            //
            //
            //        }catch(SQLException e){
            //            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
            //        }

    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed

    }//GEN-LAST:event_txtSearchKeyPressed

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        //try{
            //        jComboBoxItemName.removeAllItems();
            //        }catch(NumberFormatException e){
            //        JOptionPane.showMessageDialog(null, e.getMessage());
            //         }
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSalesNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalesNumKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalesNumKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                
                new home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel LblTotalProducts;
    public javax.swing.JLabel LblTotalSuppliers;
    public javax.swing.JLabel LblTotalUser;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnProceed;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private com.toedter.calendar.JDateChooser fromDate;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton55;
    private javax.swing.JButton jButton56;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox12;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBoxPaidBy;
    public static final javax.swing.JComboBox<String> jComboBoxSupplier = new javax.swing.JComboBox<>();
    private javax.swing.JComboBox<String> jComboBoxUsers;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooserExperyDate;
    private com.toedter.calendar.JDateChooser jDateChooserPayment;
    private com.toedter.calendar.JDateChooser jDateChooserReceiveDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel1Report;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabelHome;
    private javax.swing.JLabel jLabelItem;
    private javax.swing.JLabel jLabelSales;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelAddItem;
    private javax.swing.JPanel jPanelHome;
    private javax.swing.JPanel jPanelPrintimg;
    private javax.swing.JPanel jPanelReport;
    private javax.swing.JPanel jPanelSell;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jbPprofit;
    private javax.swing.JLabel jblAmountDue;
    private javax.swing.JLabel jblAmountDue1;
    private javax.swing.JLabel lblAMountPaid;
    private javax.swing.JTextField netSales;
    public javax.swing.JTextField textAdditionalQuantity;
    public javax.swing.JTextField textBuyingPrice;
    private javax.swing.JTextField textDescription;
    private javax.swing.JTextField textItemName;
    private javax.swing.JTextField textItemNumber;
    public javax.swing.JTextField textQuantity;
    private javax.swing.JLabel textReceiving;
    private javax.swing.JTextField textSearch;
    private javax.swing.JTextField textSearch19;
    private javax.swing.JTextField textSearch3;
    private javax.swing.JTextField textSearch7;
    private javax.swing.JTextField textStudentID;
    private javax.swing.JTextField textStudentID3;
    private javax.swing.JTextField textStudentID5;
    public javax.swing.JTextField textTotalSellingPrice;
    private javax.swing.JLabel time;
    private com.toedter.calendar.JDateChooser toDate;
    private javax.swing.JLabel today;
    private javax.swing.JTextField totalSales;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtAmtLeft;
    private javax.swing.JTextField txtAmtPaid;
    private javax.swing.JTextField txtAvailable;
    public javax.swing.JTextField txtBoxes;
    public javax.swing.JTextField txtBuyingPerUnit;
    private javax.swing.JTextField txtBuyingPrice;
    private javax.swing.JTextField txtBuyingQty;
    private javax.swing.JTextField txtDiscountAmt;
    private javax.swing.JTextField txtDiscountPercentage;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtItemNum;
    public javax.swing.JTextField txtPerBox;
    public javax.swing.JTextField txtPercentage;
    private javax.swing.JTextField txtPreviousQty;
    private javax.swing.JTextField txtProfit;
    private javax.swing.JTextField txtReceiveNum;
    private javax.swing.JTextField txtSalesNum;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSellingPRice;
    public javax.swing.JTextField txtSellingPerUnit;
    public javax.swing.JTextField txtTotalQty;
    private javax.swing.JTextField txtTransaction;
    private javax.swing.JTextField txtamtTobePaid;
    private javax.swing.JLabel username;
    public static javax.swing.JLabel username1;
    // End of variables declaration//GEN-END:variables
private void showDate() {
        d = new Date();
        dd = new SimpleDateFormat("dd-MM-yyyy");
        today.setText(dd.format(d));

        new Timer(0, (ActionEvent ae) -> {
            Date d1 = new Date();
            SimpleDateFormat dd1 = new SimpleDateFormat("hh:mm:ss a");
            time.setText(dd1.format(d1));
        }).start();
    }


 private void loginas(){
    String sql = "select * from worker where username='"+LogIn.UserName.getText()+"' ";
    try{
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
        if(rs.next()){
        username1.setText(rs.getString("username").toUpperCase());
        username.setText(rs.getString("position").toUpperCase());
        if(rs.getString("position").equals("Admin")){
     //   username.setText("Admin");
        jMenu1.show();
        }else{
        jMenu1.hide();
        }
        }
         }catch(SQLException e){
        JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
    }
}

void clear(){
    txtPercentage.setEditable(false);
    jComboBoxPaidBy.setSelectedIndex(0);
    txtPercentage.setText("0");
    txtTotalQty.setText("0");
    
                textAdditionalQuantity.setText("0");
               textStudentID.setText("");
                textReceiving.setText("");
                textItemNumber.setText("");
                textItemName.setText("");
                textDescription.setText("");
                txtBoxes.setText("0");
                txtPerBox.setText("0");
                textQuantity.setText("0");
                textBuyingPrice.setText("0.0");
                txtBuyingPerUnit.setText("0.0");
                textTotalSellingPrice.setText("0.0");
                txtSellingPerUnit.setText("0.0");
                txtamtTobePaid.setText("0.0");
                txtAmtPaid.setText("0.0");
                txtAmtLeft.setText("0.0");
                jComboBoxSupplier.setSelectedIndex(0);
                 Date date = new Date();
         jDateChooserReceiveDate.setDate(date);
         jDateChooserExperyDate.setDate(date);
             jDateChooserPayment.setDate(date);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
     //   btnPrint.setEnabled(false);
        btnSave.setEnabled(true);
         textReceiving.hide();
               

}

//void clearSalesReturn(){
//               textStudentID32.setText(" ");
//                textStudentID24.setText(" ");
//                textStudentID20.setText(" ");
//                textStudentID22.setText(" ");
//                textStudentID23.setText(" ");
//                textStudentID21.setText(" ");
//
//}


void showallitem(){
       try{
        
        
        String sql ="select receiving_number,receiving_date,item_number,item_name,quantity,selling_price_per_unit,supplier from stock";
        
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
        jTable1.setModel(DbUtils.resultSetToTableModel(rs)); 

    }
    catch(SQLException e){
    JOptionPane.showMessageDialog(null, e.getMessage());
    }
   
}

void get_TotalDate(){
   
        if(jDateChooser2.getDate()==null){
            JOptionPane.showMessageDialog(null,"Choose a Date Please!");
        }else{
       double amount=0;
            SimpleDateFormat dateFormat=new SimpleDateFormat("yyy-MM-dd");
        String dob=dateFormat.format(jDateChooser2.getDate());
       String sql = "select * from sales where date like '"+dob+"%' ";
       try {
           ps=con.prepareStatement(sql);
           rs=ps.executeQuery();
           
           while(rs.next()){
           amount += Double.parseDouble(rs.getString("total")); 
           jblAmountDue.setText("GHS"+String.valueOf(amount));
           
           }
           
           
        } catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
        }
   }

   private void billHeder()
    {
           try{
        
        
        String sql ="select * from companyinfo";
        
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
        if(rs.next()){
         String name=rs.getString("name");
         String contact=rs.getString("contact");
          String email=rs.getString("email");
         String address=rs.getString("address");
         
            jTextArea1.append("=========================================================="+"\n"
                                        +"\t"+name+""+"\n"
                                       +"\t"+contact+""+"\n"
                                        +"\t"+email+""+"\n"
                                        +"\t"+address+""+"\n"
                           +"=========================================================="+"\n");
            jTextArea1.append("Items"+"   "+"Name of Item\tUnit Price\tQty\tTotals\n");
            jTextArea1.append("==========================================================\n");
     
        }
    }
    catch(SQLException e){
    JOptionPane.showMessageDialog(null, e.getMessage());
    }
            
      
    
    }
   
   void salesNumber(){
       try{
        
        
        String sql ="select sales_number from sale_history";
        
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
        if(rs.last()){
         String num=rs.getString("sales_number");
         String newNum=num.replaceFirst("SN", "").trim();
         int finalNum=Integer.parseInt(newNum);
         int total=finalNum+1;
         txtSalesNum.setText("SN"+total);
        }else{
           txtSalesNum.setText("SN"+"1000");
        }
    }
    catch(SQLException e){
    JOptionPane.showMessageDialog(null, e.getMessage());
    }
   
}
   void clearSale(){
            String sql3="delete  from temp ";
        try {
            ps =con.prepareStatement(sql3);
              ps.execute();
        } catch (SQLException ex) {
            Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
        }
               showallTemptable();
       jComboBox1.setEnabled(false);
       jComboBox1.setSelectedIndex(0);
       jPanelPrintimg.hide();
         jTextArea1.setText("");
        textStudentID5.setText("");
      txtAmount.setText("00.0");
      jblAmountDue.setText("00.0");
      lblAMountPaid.setText("00.0");
      txtReceiveNum.setText("");
      textStudentID.setText("");
      txtSellingPRice.setText("");
      txtPreviousQty.setText("");
       txtAvailable.setText("");
      textStudentID3.setText("");
      txtItemNum.setText("");
      txtReceiveNum.setText("");
      txtAvailable.setText("");
      txtBuyingQty.setText("");
      txtAvailable.setText("");
       txtSearch.setText("");
       txtItemName.setText("");
       txtBuyingPrice.setText("");
       txtProfit.setText("");
       txtDiscountPercentage.setText("0.0");
       txtDiscountAmt.setText("0.0");
      txtBuyingQty.setEditable(false);
      txtDiscountPercentage.setEditable(false);
     // txtPrint.setEnabled(false);
      btnProceed.setEnabled(false);
      btnAdd.setEnabled(false);
      billHeder();
      salesNumber();
     
   
   }
   
   void showReceiveNumber(){
         String sql = "select receiving_number from item";
        try{
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            while(rs.next()){
             //   CmbForm.addItem(rs.getString("receiving_number"));
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
        } 
   }
  
   void showallTemptable(){
       try{
        
        
        String sql ="select sale_number,receiving_number,item_number,item_name,quantity,selling_price,total_price from temp";
        
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
        jTable2.setModel(DbUtils.resultSetToTableModel(rs)); 

    }
    catch(SQLException e){
    JOptionPane.showMessageDialog(null, e.getMessage());
    }
   
}
   
   void showallSalesHistory(){
       try{
        
        
        String sql ="select sales_number,date,AmountPaid,profit,user from sale_history";
        
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
        jTable7.setModel(DbUtils.resultSetToTableModel(rs)); 

    }
    catch(SQLException e){
    JOptionPane.showMessageDialog(null, e.getMessage());
    }
   
}
   void clearReportPanel(){
       netSales.setText("0.0");
        totalSales.setText("0.0");
        txtTransaction.setText("0");
                 Date date = new Date();
         fromDate.setDate(null);
         jDateChooserExperyDate.setDate(null);
   jComboBoxUsers.setSelectedIndex(0);
   }
   
   
   
    void nearExpiry(){
      String sql = "select * from stock";
       try{
           ps=con.prepareStatement(sql);
           rs=ps.executeQuery();
           while(rs.next()){
               String daysLeft = rs.getString("Expirydaysleft");
               String itemId = rs.getString("receiving_number");
               int days = Integer.parseInt(daysLeft);
               if((days>0) && (days<61) ){
                    String sql1= "update stock set status='Close to Expire' where receiving_number="+itemId+" "; 
                ps=con.prepareStatement(sql1);
                ps.executeUpdate();
                              
               }
           
           }
           }catch(NumberFormatException | SQLException e){
           JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
       }
    
     void showNearExpiry(){
         try {
              String sql = "select * from stock where status='Close to Expire' ";
               ps=con.prepareStatement(sql);
               rs=ps.executeQuery();
               if(rs.next()){
                      Warning warning = new Warning();
                     warning.show();
               }
         } catch (Exception e) {
         }
     
     }
    
    
     void Expiry(){
   String sql = "select * from stock";
       try{
           ps=con.prepareStatement(sql);
           rs=ps.executeQuery();
           while(rs.next()){
               String daysLeft = rs.getString("Expirydaysleft");
               String itemId = rs.getString("receiving_number");
               int days = Integer.parseInt(daysLeft);
               if(days<=0){
                      String sql1= "update stock set status='Expired' where receiving_number="+itemId+" "; 
                ps=con.prepareStatement(sql1);
                ps.executeUpdate();
               
               }
           
           
           }
           
           }catch(NumberFormatException | SQLException e){
           JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
     
 }
     
      
     void showExpiry(){
   String sql = "select * from stock where status='Expired' ";
     try{
           ps=con.prepareStatement(sql);
           rs=ps.executeQuery();
            if(rs.next()){
                         alreadyExpired warning = new alreadyExpired();
                     warning.show();
           }
        }catch(NumberFormatException | SQLException e){
           JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
     }
     
     
      void UpdateExpiry(){
     
      String sql = "select receiving_number,expery_date from stock";
       try{
           ps=con.prepareStatement(sql);
           rs=ps.executeQuery();
           while(rs.next()){
                SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
                 
                Date experyDate = rs.getDate("expery_date");
                String itemId = rs.getString("receiving_number");
                
               //Calculating Expiry Days left
                Calendar current = new  GregorianCalendar();
                Calendar expiry = new  GregorianCalendar();

                 
                 Date d1 = new Date();

                 String experyDateString=sdf.format(experyDate);
                 String s1=sdf.format(d1);

                 Date date = sdf.parse(s1);
                 current.setTime(date);

                 date = sdf.parse(experyDateString);
                 expiry.setTime(date);
               
                 int diff = (int) ((experyDate.getTime()-d1.getTime())/(1000*60*60*24));
                String sql1= "update stock set Expirydaysleft="+diff+" where receiving_number="+itemId+" "; 
                ps=con.prepareStatement(sql1);
                ps.executeUpdate();
           
           }
           }catch(SQLException | ParseException e){
           JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
     
   
 }
      
      void checkQty(){
   String sql = "select * from stock where total_qty<'10'";
       try{
           ps=con.prepareStatement(sql);
           rs=ps.executeQuery();
           if(rs.next()){
                    qtyAlert warning = new qtyAlert();
                     warning.show();
           }
           }catch(NumberFormatException | SQLException e){
           JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
       }
     
 }
 
      
      
      
      void showCompanyInfo(){
     try{

ps=con.prepareStatement("Select name from companyinfo ");
rs=ps.executeQuery();
   if(rs.next()){
       String Cname=rs.getString("name");
       String systemName= Cname+" system".toUpperCase();
       
       jLabel18.setText(systemName);

           
   } 
  
   

}catch(HeadlessException | SQLException e){
    JOptionPane.showMessageDialog(null, e.getMessage());
  
        
}

}
      
      void showallBadOrder(){
       try{
        
        
        String sql ="select * from badorder";
        
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
      //  jTable9.setModel(DbUtils.resultSetToTableModel(rs)); 

    }
    catch(SQLException e){
    JOptionPane.showMessageDialog(null, e.getMessage());
    }
   
}
      
      void badOrderClear(){
//          CmbForm.setSelectedIndex(0);
//          textStudentID15.setText("");
//          textStudentID19.setText("0");
//          Txttotal_price.setText("00.0");
          showallBadOrder();
      }
      
            void salesReturnClear(){
//          textStudentID32.setText("");
//           textStudentID24.setText("");
//            textStudentID20.setText("");
//             textStudentID22.setText("");
//              textStudentID23.setText("");
//              textStudentID21.setText("");
//              ((DefaultTableModel)jTable13.getModel()).setNumRows(0);
//              jButton62.setEnabled(false);
//              jButton39.setEnabled(false);
//              jButton61.setEnabled(false);
     }
            
    void returnedToStockTable(){
                      try{
        
        String sql ="select * from sales_return";
        
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
      //  jTable14.setModel(DbUtils.resultSetToTableModel(rs)); 

    }
    catch(SQLException e){
    JOptionPane.showMessageDialog(null, e);
    }
     
     }
    
         void stockReturnClear(){
//          textStudentID30.setText("");
//           textStudentID27.setText("");
//          textStudentID28.setText("0");
//          textStudentID29.setText("");
//          ((DefaultTableModel)jTable13.getModel()).setNumRows(0);
//          textStudentID28.setEditable(false);
      }
    void users(){
         String sql = "select * from worker";
        try{
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBoxUsers.addItem(rs.getString("username"));
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
        } 
    
    }
  
    
    void supplier(){
         String sql = "select name from supplier";
        try{
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            while(rs.next()){
                jComboBoxSupplier.addItem(rs.getString("name"));
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
        } 
    
    }
    
     void ItenName(){
         String sql = "select item_name from stock";
        try{
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            while(rs.next()){
      //          jComboBoxItemName.addItem(rs.getString("item_name"));
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e.getMessage(),"Error",2);
        } 
    
    }
    
    
 
    
    void printReceipt(){
         DecimalFormat df = new  DecimalFormat("#.##");
                jPanelPrintimg.show();
        String percentage = txtDiscountPercentage.getText().trim();
        
         double discountPercent=Double.parseDouble(txtDiscountPercentage.getText().trim());
         double TotalAfterMultiplty = discountPercent/100;
         
         double dueAmount=Double.parseDouble(jblAmountDue.getText().trim());
         double discountPercentageAmount = TotalAfterMultiplty*dueAmount;
         
         double discountAmt=Double.parseDouble(txtDiscountAmt.getText().trim());
         
    
     
        if(percentage.equals("0.0")){
             java.sql.Timestamp date = new  java.sql.Timestamp(new java.util.Date().getTime());
        jTextArea1.append("==========================================================\n");
        jTextArea1.append("\tDue Amount:...GHS"+jblAmountDue.getText()
                          +"\n\tDiscount:..."+df.format(discountAmt) +""+"\n"
                          +"\tAmount Paid:..."+lblAMountPaid.getText() +""+"\n"
                         +"\tDate:..."+date +""+"\n"
                         + "\tSold by:..."+username1.getText()+"\n"
                         + "\tSales Invoice:..."+txtSalesNum.getText()+"\n"        
                       + "==========================================================\n"
                      +"\tDevelop by: UmagaGee\n\tCall Developer on: 0542306636\n\tThank You, Have a nice! Day"+"\n");
        
        try {
            jTextArea1.print();
                clearSale(); 
                jButton16.setEnabled(true);
                btnProceed.setEnabled(false);
               // txtPrint.setEnabled(false);
        } catch (PrinterException ex) {
            Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else{
             java.sql.Timestamp date = new  java.sql.Timestamp(new java.util.Date().getTime());
        jTextArea1.append("==========================================================\n");
        jTextArea1.append("\tDue Amount:...GHS"+jblAmountDue.getText()
                          +"\n\tDiscount:..."+df.format(discountPercentageAmount) +""+"\n"
                          +"\tAmount Paid:..."+lblAMountPaid.getText() +""+"\n"
                         +"\tDate:..."+date +""+"\n"
                         + "\tSold by:..."+username1.getText()+"\n"
                         + "\tSales Invoice:..."+txtSalesNum.getText()+"\n"        
                       + "==========================================================\n"
                      +"\tDevelop by: UmagaGee\n\tCall Developer on:0542306636\n\tThank You, Have a nice! Day"+"\n");
        
        try {
            jTextArea1.print();
                clearSale(); 
                jButton16.setEnabled(true);
                btnProceed.setEnabled(false);
//                txtPrint.setEnabled(false);
        } catch (PrinterException ex) {
            Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
        }
        }

    
    }
    
    void showStock(){
       try{
        
        String sql ="select receiving_number,receiving_date,item_number,item_name,quantity,total_selling_price,status from stock";
        
        ps=con.prepareStatement(sql);
        rs=ps.executeQuery();
    //    jTable5.setModel(DbUtils.resultSetToTableModel(rs)); 

    }
    catch(SQLException e){
    JOptionPane.showMessageDialog(null, e);
    }
    }
    
    
            void totalItems(){
             try{
           stm=con.createStatement();
         String sql="Select count(receiving_number) AS Total from stock ";
            rs=stm.executeQuery(sql);
              if(rs.next()){
                     String txt=rs.getString("Total");
                    LblTotalProducts.setText(txt);
            }else{
            LblTotalProducts.setText("0");
            }
                   
          }catch(SQLException e){
              JOptionPane.showMessageDialog(null, e.getMessage());
          }
            }
            
            
        void totalUsers(){
             try{
           stm=con.createStatement();
         String sql="Select count(username) AS Total from worker ";
            rs=stm.executeQuery(sql);
              if(rs.next()){
                     String txt=rs.getString("Total");
                    LblTotalUser.setText(txt);
            }else{
            LblTotalUser.setText("0");
            }
                   
          }catch(SQLException e){
              JOptionPane.showMessageDialog(null, e.getMessage());
          }
            }
          
        void totalSupplier(){
             try{
           stm=con.createStatement();
         String sql="Select count(id) AS Total from supplier  ";
            rs=stm.executeQuery(sql);
              if(rs.next()){
                     String txt=rs.getString("Total");
                    LblTotalSuppliers.setText(txt);
            }else{
            LblTotalSuppliers.setText("0");
            }
                   
          }catch(SQLException e){
              JOptionPane.showMessageDialog(null, e.getMessage());
          }
            }
        
  
          void showProductinSelling(){
              String sql="Select  receiving_number,item_number,item_name from stock "
                + " ";

        try {
            ps=con.prepareStatement(sql);
            rs=ps.executeQuery();
            jTable3.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());

        }
          }
  void Savecalculatoin(){
         try{
                  
                  ////Per Box
             int box=Integer.parseInt(txtBoxes.getText());
              int perBox=Integer.parseInt(txtPerBox.getText());
              int total=box*perBox;
                textQuantity.setText(String.valueOf(total));
               
             
              //Additional Qty
               int Qty=Integer.parseInt(textQuantity.getText().trim());
             int additionalQty=Integer.parseInt(textAdditionalQuantity.getText().trim());
             int newQty = Qty+additionalQty;

              txtTotalQty.setText(String.valueOf(newQty));
              
              
              
              //Percentage
            double percentage=Double.parseDouble(txtPercentage.getText());
             
             double Buyingpercertage = percentage/100; 
             double buyQty=Double.parseDouble(txtTotalQty.getText());
              
             double buyingPrice=Double.parseDouble(textBuyingPrice.getText());
          //    double sellingPrice=Double.parseDouble(textTotalSellingPrice.getText());
              
              
              
              //Total Selling Price
              double sellingPricePer = buyingPrice*Buyingpercertage;
              double FinalsellingPrice = buyingPrice+sellingPricePer;
              ////////////////
              
              
              //Buying Per Unit
              double buyingPricePerUnit = FinalsellingPrice/buyQty;
              
              
                //Selling Per Unit
              double sellingPricePerUnit = buyingPrice/buyQty;
              
              //Amount To be Paid
             // double total=buyQty*buyingPrice;
              
              
               //Buying Price Per Box Amount
               double perbox=Double.parseDouble(txtPerBox.getText());
                double BuyingPricePerBox=buyingPrice/perbox;
             //  textBuyingPricePerBox.setText(String.valueOf(df.format(BuyingPricePerBox)));
              
              
             
                           
              textTotalSellingPrice.setText(String.valueOf(df.format(FinalsellingPrice)));
               txtBuyingPerUnit.setText(String.valueOf(df.format(sellingPricePerUnit)));
                txtSellingPerUnit.setText(String.valueOf(df.format(buyingPricePerUnit)));
               txtamtTobePaid.setText(String.valueOf(buyingPrice));
                txtAmtLeft.setText(String.valueOf(df.format(buyingPrice)));
                
                //Amount PAid
                    String amt_Paid=txtAmtPaid.getText().trim();
                double numPaid = Double.parseDouble(amt_Paid);
                String amt_to_be_Paid=txtamtTobePaid.getText().trim();
                double numToBePaid = Double.parseDouble(amt_to_be_Paid);


          
          if(numPaid>numToBePaid){
                JOptionPane.showMessageDialog(null,"Amount Paid should not be more than Amount to be Paid");
          txtAmtPaid.setText("");
          }else{
          double AmtPaid=Double.parseDouble( txtAmtPaid.getText());
              
              double toBePaid=Double.parseDouble(txtamtTobePaid.getText());
              double AmtLeft=toBePaid-AmtPaid;
              txtAmtLeft.setText(String.valueOf(AmtLeft));
              
          
          }

         }catch(NumberFormatException e){
     //    JOptionPane.showMessageDialog(null, e.getMessage());
         }
  }
  
  
  void UpdateCalulation(){
      
      try {
          
           

               
                String sql="SELECT * FROM stock WHERE receiving_number='"+textReceiving.getText()+"'";
                ps=con.prepareStatement(sql);
                rs=ps.executeQuery();
                if(rs.next()){
                   ////Per Box
             int box=Integer.parseInt(txtBoxes.getText());
              int perBox=Integer.parseInt(txtPerBox.getText());
              int total=box*perBox;
                textQuantity.setText(String.valueOf(total));
                
                 //Additional Qty
               int Qty=Integer.parseInt(textQuantity.getText().trim());
             int additionalQty=Integer.parseInt(textAdditionalQuantity.getText().trim());
             int newQty = Qty+additionalQty;
                    
                int DbTotalQty = rs.getInt("total_qty");
                int newTotalQty = DbTotalQty+newQty;
                txtTotalQty.setText(String.valueOf(newTotalQty));
                ///////////////////////////
                
                  //Percentage
            double percentage=Double.parseDouble(txtPercentage.getText());
             
             double Buyingpercertage = percentage/100; 
             double buyQty=Double.parseDouble(txtTotalQty.getText());
              
             double buyingPrice=Double.parseDouble(textBuyingPrice.getText());
          //    double sellingPrice=Double.parseDouble(textTotalSellingPrice.getText());
              
              
              
              //Total Selling Price
              double sellingPricePer = buyingPrice*Buyingpercertage;
              double FinalsellingPrice = buyingPrice+sellingPricePer;
              ////////////////
              
              
              //Buying Per Unit
              double buyingPricePerUnit = FinalsellingPrice/buyQty;
              
              
                //Selling Per Unit
              double sellingPricePerUnit = buyingPrice/buyQty;
              
              //Amount To be Paid
             // double total=buyQty*buyingPrice;
              
              
               //Buying Price Per Box Amount
               double perbox=Double.parseDouble(txtPerBox.getText());
                double BuyingPricePerBox=buyingPrice/perbox;
             //  textBuyingPricePerBox.setText(String.valueOf(df.format(BuyingPricePerBox)));
              
              
             
                           
              textTotalSellingPrice.setText(String.valueOf(df.format(FinalsellingPrice)));
               txtBuyingPerUnit.setText(String.valueOf(df.format(sellingPricePerUnit)));
                txtSellingPerUnit.setText(String.valueOf(df.format(buyingPricePerUnit)));
               txtamtTobePaid.setText(String.valueOf(buyingPrice));
                txtAmtLeft.setText(String.valueOf(df.format(buyingPrice)));
                
                //Amount PAid
                    String amt_Paid=txtAmtPaid.getText().trim();
                double numPaid = Double.parseDouble(amt_Paid);
                String amt_to_be_Paid=txtamtTobePaid.getText().trim();
                double numToBePaid = Double.parseDouble(amt_to_be_Paid);


          
          if(numPaid>numToBePaid){
                JOptionPane.showMessageDialog(null,"Amount Paid should not be more than Amount to be Paid");
          txtAmtPaid.setText("");
          }else{
          double AmtPaid=Double.parseDouble( txtAmtPaid.getText());
              
              double toBePaid=Double.parseDouble(txtamtTobePaid.getText());
              double AmtLeft=toBePaid-AmtPaid;
              txtAmtLeft.setText(String.valueOf(AmtLeft));
              
          
          }
                }
          
      } catch (NumberFormatException | SQLException e) {
           JOptionPane.showMessageDialog(null, e.getMessage());
      }
  
  }
  
  void clearUpdate(){
  
   jComboBoxPaidBy.setSelectedIndex(0);
    txtPercentage.setText("0");
    txtTotalQty.setText("0");
    
                textAdditionalQuantity.setText("0");
               textStudentID.setText("");
                textReceiving.setText("");
                textItemNumber.setText("");
                textItemName.setText("");
                textDescription.setText("");
                txtBoxes.setText("0");
                txtPerBox.setText("0");
                textQuantity.setText("0");
                textBuyingPrice.setText("0.0");
                txtBuyingPerUnit.setText("0.0");
                textTotalSellingPrice.setText("0.0");
                txtSellingPerUnit.setText("0.0");
                txtamtTobePaid.setText("0.0");
                txtAmtPaid.setText("0.0");
                txtAmtLeft.setText("0.0");
                jComboBoxSupplier.setSelectedIndex(0);}
}
